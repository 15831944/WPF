// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmsg.proto

#ifndef PROTOBUF_netmsg_2eproto__INCLUDED
#define PROTOBUF_netmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace netmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_netmsg_2eproto();
void protobuf_AssignDesc_netmsg_2eproto();
void protobuf_ShutdownFile_netmsg_2eproto();

class MsgPack;
class MsgHead;
class RegistTypeMsg;
class QueryDevCntMsg;
class QueryDevCntMsgResult;
class QueryMsg;
class QueryMsgResult;
class AddMsg;
class AddMsgResult;
class ExcuteSqlMsg;
class ExcuteSqlMsgResult;
class QueryDevSpeedMsg;
class QueryDevSpeedMsgResult;

// ===================================================================

class MsgPack : public ::google::protobuf::Message {
 public:
  MsgPack();
  virtual ~MsgPack();

  MsgPack(const MsgPack& from);

  inline MsgPack& operator=(const MsgPack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPack& default_instance();

  void Swap(MsgPack* other);

  // implements Message ----------------------------------------------

  MsgPack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPack& from);
  void MergeFrom(const MsgPack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .netmsg.MsgHead head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::netmsg::MsgHead& head() const;
  inline ::netmsg::MsgHead* mutable_head();
  inline ::netmsg::MsgHead* release_head();
  inline void set_allocated_head(::netmsg::MsgHead* head);

  // optional .netmsg.RegistTypeMsg registtype = 2;
  inline bool has_registtype() const;
  inline void clear_registtype();
  static const int kRegisttypeFieldNumber = 2;
  inline const ::netmsg::RegistTypeMsg& registtype() const;
  inline ::netmsg::RegistTypeMsg* mutable_registtype();
  inline ::netmsg::RegistTypeMsg* release_registtype();
  inline void set_allocated_registtype(::netmsg::RegistTypeMsg* registtype);

  // optional .netmsg.QueryDevCntMsg querydevcntmsg = 3;
  inline bool has_querydevcntmsg() const;
  inline void clear_querydevcntmsg();
  static const int kQuerydevcntmsgFieldNumber = 3;
  inline const ::netmsg::QueryDevCntMsg& querydevcntmsg() const;
  inline ::netmsg::QueryDevCntMsg* mutable_querydevcntmsg();
  inline ::netmsg::QueryDevCntMsg* release_querydevcntmsg();
  inline void set_allocated_querydevcntmsg(::netmsg::QueryDevCntMsg* querydevcntmsg);

  // optional .netmsg.QueryDevCntMsgResult querydevcntmsgresult = 4;
  inline bool has_querydevcntmsgresult() const;
  inline void clear_querydevcntmsgresult();
  static const int kQuerydevcntmsgresultFieldNumber = 4;
  inline const ::netmsg::QueryDevCntMsgResult& querydevcntmsgresult() const;
  inline ::netmsg::QueryDevCntMsgResult* mutable_querydevcntmsgresult();
  inline ::netmsg::QueryDevCntMsgResult* release_querydevcntmsgresult();
  inline void set_allocated_querydevcntmsgresult(::netmsg::QueryDevCntMsgResult* querydevcntmsgresult);

  // optional .netmsg.QueryMsg query = 5;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 5;
  inline const ::netmsg::QueryMsg& query() const;
  inline ::netmsg::QueryMsg* mutable_query();
  inline ::netmsg::QueryMsg* release_query();
  inline void set_allocated_query(::netmsg::QueryMsg* query);

  // optional .netmsg.AddMsg add = 6;
  inline bool has_add() const;
  inline void clear_add();
  static const int kAddFieldNumber = 6;
  inline const ::netmsg::AddMsg& add() const;
  inline ::netmsg::AddMsg* mutable_add();
  inline ::netmsg::AddMsg* release_add();
  inline void set_allocated_add(::netmsg::AddMsg* add);

  // optional .netmsg.QueryMsgResult querymsgresult = 7;
  inline bool has_querymsgresult() const;
  inline void clear_querymsgresult();
  static const int kQuerymsgresultFieldNumber = 7;
  inline const ::netmsg::QueryMsgResult& querymsgresult() const;
  inline ::netmsg::QueryMsgResult* mutable_querymsgresult();
  inline ::netmsg::QueryMsgResult* release_querymsgresult();
  inline void set_allocated_querymsgresult(::netmsg::QueryMsgResult* querymsgresult);

  // optional .netmsg.AddMsgResult addmsgresult = 8;
  inline bool has_addmsgresult() const;
  inline void clear_addmsgresult();
  static const int kAddmsgresultFieldNumber = 8;
  inline const ::netmsg::AddMsgResult& addmsgresult() const;
  inline ::netmsg::AddMsgResult* mutable_addmsgresult();
  inline ::netmsg::AddMsgResult* release_addmsgresult();
  inline void set_allocated_addmsgresult(::netmsg::AddMsgResult* addmsgresult);

  // optional .netmsg.ExcuteSqlMsg excutesqlmsg = 9;
  inline bool has_excutesqlmsg() const;
  inline void clear_excutesqlmsg();
  static const int kExcutesqlmsgFieldNumber = 9;
  inline const ::netmsg::ExcuteSqlMsg& excutesqlmsg() const;
  inline ::netmsg::ExcuteSqlMsg* mutable_excutesqlmsg();
  inline ::netmsg::ExcuteSqlMsg* release_excutesqlmsg();
  inline void set_allocated_excutesqlmsg(::netmsg::ExcuteSqlMsg* excutesqlmsg);

  // optional .netmsg.ExcuteSqlMsgResult excutesqlmsgresult = 10;
  inline bool has_excutesqlmsgresult() const;
  inline void clear_excutesqlmsgresult();
  static const int kExcutesqlmsgresultFieldNumber = 10;
  inline const ::netmsg::ExcuteSqlMsgResult& excutesqlmsgresult() const;
  inline ::netmsg::ExcuteSqlMsgResult* mutable_excutesqlmsgresult();
  inline ::netmsg::ExcuteSqlMsgResult* release_excutesqlmsgresult();
  inline void set_allocated_excutesqlmsgresult(::netmsg::ExcuteSqlMsgResult* excutesqlmsgresult);

  // optional .netmsg.QueryDevSpeedMsg querydevspeedmsg = 11;
  inline bool has_querydevspeedmsg() const;
  inline void clear_querydevspeedmsg();
  static const int kQuerydevspeedmsgFieldNumber = 11;
  inline const ::netmsg::QueryDevSpeedMsg& querydevspeedmsg() const;
  inline ::netmsg::QueryDevSpeedMsg* mutable_querydevspeedmsg();
  inline ::netmsg::QueryDevSpeedMsg* release_querydevspeedmsg();
  inline void set_allocated_querydevspeedmsg(::netmsg::QueryDevSpeedMsg* querydevspeedmsg);

  // optional .netmsg.QueryDevSpeedMsgResult querydevspeedmsgresult = 12;
  inline bool has_querydevspeedmsgresult() const;
  inline void clear_querydevspeedmsgresult();
  static const int kQuerydevspeedmsgresultFieldNumber = 12;
  inline const ::netmsg::QueryDevSpeedMsgResult& querydevspeedmsgresult() const;
  inline ::netmsg::QueryDevSpeedMsgResult* mutable_querydevspeedmsgresult();
  inline ::netmsg::QueryDevSpeedMsgResult* release_querydevspeedmsgresult();
  inline void set_allocated_querydevspeedmsgresult(::netmsg::QueryDevSpeedMsgResult* querydevspeedmsgresult);

  // @@protoc_insertion_point(class_scope:netmsg.MsgPack)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_registtype();
  inline void clear_has_registtype();
  inline void set_has_querydevcntmsg();
  inline void clear_has_querydevcntmsg();
  inline void set_has_querydevcntmsgresult();
  inline void clear_has_querydevcntmsgresult();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_add();
  inline void clear_has_add();
  inline void set_has_querymsgresult();
  inline void clear_has_querymsgresult();
  inline void set_has_addmsgresult();
  inline void clear_has_addmsgresult();
  inline void set_has_excutesqlmsg();
  inline void clear_has_excutesqlmsg();
  inline void set_has_excutesqlmsgresult();
  inline void clear_has_excutesqlmsgresult();
  inline void set_has_querydevspeedmsg();
  inline void clear_has_querydevspeedmsg();
  inline void set_has_querydevspeedmsgresult();
  inline void clear_has_querydevspeedmsgresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::netmsg::MsgHead* head_;
  ::netmsg::RegistTypeMsg* registtype_;
  ::netmsg::QueryDevCntMsg* querydevcntmsg_;
  ::netmsg::QueryDevCntMsgResult* querydevcntmsgresult_;
  ::netmsg::QueryMsg* query_;
  ::netmsg::AddMsg* add_;
  ::netmsg::QueryMsgResult* querymsgresult_;
  ::netmsg::AddMsgResult* addmsgresult_;
  ::netmsg::ExcuteSqlMsg* excutesqlmsg_;
  ::netmsg::ExcuteSqlMsgResult* excutesqlmsgresult_;
  ::netmsg::QueryDevSpeedMsg* querydevspeedmsg_;
  ::netmsg::QueryDevSpeedMsgResult* querydevspeedmsgresult_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static MsgPack* default_instance_;
};
// -------------------------------------------------------------------

class MsgHead : public ::google::protobuf::Message {
 public:
  MsgHead();
  virtual ~MsgHead();

  MsgHead(const MsgHead& from);

  inline MsgHead& operator=(const MsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHead& default_instance();

  void Swap(MsgHead* other);

  // implements Message ----------------------------------------------

  MsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHead& from);
  void MergeFrom(const MsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 globalPackNumber = 1 [default = 1];
  inline bool has_globalpacknumber() const;
  inline void clear_globalpacknumber();
  static const int kGlobalPackNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 globalpacknumber() const;
  inline void set_globalpacknumber(::google::protobuf::uint32 value);

  // required int32 totalPack = 2 [default = 1];
  inline bool has_totalpack() const;
  inline void clear_totalpack();
  static const int kTotalPackFieldNumber = 2;
  inline ::google::protobuf::int32 totalpack() const;
  inline void set_totalpack(::google::protobuf::int32 value);

  // required int32 packIndex = 3 [default = 1];
  inline bool has_packindex() const;
  inline void clear_packindex();
  static const int kPackIndexFieldNumber = 3;
  inline ::google::protobuf::int32 packindex() const;
  inline void set_packindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:netmsg.MsgHead)
 private:
  inline void set_has_globalpacknumber();
  inline void clear_has_globalpacknumber();
  inline void set_has_totalpack();
  inline void clear_has_totalpack();
  inline void set_has_packindex();
  inline void clear_has_packindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 globalpacknumber_;
  ::google::protobuf::int32 totalpack_;
  ::google::protobuf::int32 packindex_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static MsgHead* default_instance_;
};
// -------------------------------------------------------------------

class RegistTypeMsg : public ::google::protobuf::Message {
 public:
  RegistTypeMsg();
  virtual ~RegistTypeMsg();

  RegistTypeMsg(const RegistTypeMsg& from);

  inline RegistTypeMsg& operator=(const RegistTypeMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistTypeMsg& default_instance();

  void Swap(RegistTypeMsg* other);

  // implements Message ----------------------------------------------

  RegistTypeMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistTypeMsg& from);
  void MergeFrom(const RegistTypeMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool bDevice = 1;
  inline bool has_bdevice() const;
  inline void clear_bdevice();
  static const int kBDeviceFieldNumber = 1;
  inline bool bdevice() const;
  inline void set_bdevice(bool value);

  // @@protoc_insertion_point(class_scope:netmsg.RegistTypeMsg)
 private:
  inline void set_has_bdevice();
  inline void clear_has_bdevice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool bdevice_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static RegistTypeMsg* default_instance_;
};
// -------------------------------------------------------------------

class QueryDevCntMsg : public ::google::protobuf::Message {
 public:
  QueryDevCntMsg();
  virtual ~QueryDevCntMsg();

  QueryDevCntMsg(const QueryDevCntMsg& from);

  inline QueryDevCntMsg& operator=(const QueryDevCntMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryDevCntMsg& default_instance();

  void Swap(QueryDevCntMsg* other);

  // implements Message ----------------------------------------------

  QueryDevCntMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryDevCntMsg& from);
  void MergeFrom(const QueryDevCntMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:netmsg.QueryDevCntMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static QueryDevCntMsg* default_instance_;
};
// -------------------------------------------------------------------

class QueryDevCntMsgResult : public ::google::protobuf::Message {
 public:
  QueryDevCntMsgResult();
  virtual ~QueryDevCntMsgResult();

  QueryDevCntMsgResult(const QueryDevCntMsgResult& from);

  inline QueryDevCntMsgResult& operator=(const QueryDevCntMsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryDevCntMsgResult& default_instance();

  void Swap(QueryDevCntMsgResult* other);

  // implements Message ----------------------------------------------

  QueryDevCntMsgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryDevCntMsgResult& from);
  void MergeFrom(const QueryDevCntMsgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 devCnt = 1;
  inline bool has_devcnt() const;
  inline void clear_devcnt();
  static const int kDevCntFieldNumber = 1;
  inline ::google::protobuf::int32 devcnt() const;
  inline void set_devcnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:netmsg.QueryDevCntMsgResult)
 private:
  inline void set_has_devcnt();
  inline void clear_has_devcnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 devcnt_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static QueryDevCntMsgResult* default_instance_;
};
// -------------------------------------------------------------------

class QueryMsg : public ::google::protobuf::Message {
 public:
  QueryMsg();
  virtual ~QueryMsg();

  QueryMsg(const QueryMsg& from);

  inline QueryMsg& operator=(const QueryMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMsg& default_instance();

  void Swap(QueryMsg* other);

  // implements Message ----------------------------------------------

  QueryMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryMsg& from);
  void MergeFrom(const QueryMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:netmsg.QueryMsg)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static QueryMsg* default_instance_;
};
// -------------------------------------------------------------------

class QueryMsgResult : public ::google::protobuf::Message {
 public:
  QueryMsgResult();
  virtual ~QueryMsgResult();

  QueryMsgResult(const QueryMsgResult& from);

  inline QueryMsgResult& operator=(const QueryMsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMsgResult& default_instance();

  void Swap(QueryMsgResult* other);

  // implements Message ----------------------------------------------

  QueryMsgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryMsgResult& from);
  void MergeFrom(const QueryMsgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string resultData = 1;
  inline bool has_resultdata() const;
  inline void clear_resultdata();
  static const int kResultDataFieldNumber = 1;
  inline const ::std::string& resultdata() const;
  inline void set_resultdata(const ::std::string& value);
  inline void set_resultdata(const char* value);
  inline void set_resultdata(const char* value, size_t size);
  inline ::std::string* mutable_resultdata();
  inline ::std::string* release_resultdata();
  inline void set_allocated_resultdata(::std::string* resultdata);

  // required string resultError = 2;
  inline bool has_resulterror() const;
  inline void clear_resulterror();
  static const int kResultErrorFieldNumber = 2;
  inline const ::std::string& resulterror() const;
  inline void set_resulterror(const ::std::string& value);
  inline void set_resulterror(const char* value);
  inline void set_resulterror(const char* value, size_t size);
  inline ::std::string* mutable_resulterror();
  inline ::std::string* release_resulterror();
  inline void set_allocated_resulterror(::std::string* resulterror);

  // @@protoc_insertion_point(class_scope:netmsg.QueryMsgResult)
 private:
  inline void set_has_resultdata();
  inline void clear_has_resultdata();
  inline void set_has_resulterror();
  inline void clear_has_resulterror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* resultdata_;
  ::std::string* resulterror_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static QueryMsgResult* default_instance_;
};
// -------------------------------------------------------------------

class AddMsg : public ::google::protobuf::Message {
 public:
  AddMsg();
  virtual ~AddMsg();

  AddMsg(const AddMsg& from);

  inline AddMsg& operator=(const AddMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMsg& default_instance();

  void Swap(AddMsg* other);

  // implements Message ----------------------------------------------

  AddMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMsg& from);
  void MergeFrom(const AddMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TableName = 1;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // required string Msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:netmsg.AddMsg)
 private:
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tablename_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static AddMsg* default_instance_;
};
// -------------------------------------------------------------------

class AddMsgResult : public ::google::protobuf::Message {
 public:
  AddMsgResult();
  virtual ~AddMsgResult();

  AddMsgResult(const AddMsgResult& from);

  inline AddMsgResult& operator=(const AddMsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMsgResult& default_instance();

  void Swap(AddMsgResult* other);

  // implements Message ----------------------------------------------

  AddMsgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMsgResult& from);
  void MergeFrom(const AddMsgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string resultError = 1;
  inline bool has_resulterror() const;
  inline void clear_resulterror();
  static const int kResultErrorFieldNumber = 1;
  inline const ::std::string& resulterror() const;
  inline void set_resulterror(const ::std::string& value);
  inline void set_resulterror(const char* value);
  inline void set_resulterror(const char* value, size_t size);
  inline ::std::string* mutable_resulterror();
  inline ::std::string* release_resulterror();
  inline void set_allocated_resulterror(::std::string* resulterror);

  // @@protoc_insertion_point(class_scope:netmsg.AddMsgResult)
 private:
  inline void set_has_resulterror();
  inline void clear_has_resulterror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* resulterror_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static AddMsgResult* default_instance_;
};
// -------------------------------------------------------------------

class ExcuteSqlMsg : public ::google::protobuf::Message {
 public:
  ExcuteSqlMsg();
  virtual ~ExcuteSqlMsg();

  ExcuteSqlMsg(const ExcuteSqlMsg& from);

  inline ExcuteSqlMsg& operator=(const ExcuteSqlMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExcuteSqlMsg& default_instance();

  void Swap(ExcuteSqlMsg* other);

  // implements Message ----------------------------------------------

  ExcuteSqlMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExcuteSqlMsg& from);
  void MergeFrom(const ExcuteSqlMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:netmsg.ExcuteSqlMsg)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static ExcuteSqlMsg* default_instance_;
};
// -------------------------------------------------------------------

class ExcuteSqlMsgResult : public ::google::protobuf::Message {
 public:
  ExcuteSqlMsgResult();
  virtual ~ExcuteSqlMsgResult();

  ExcuteSqlMsgResult(const ExcuteSqlMsgResult& from);

  inline ExcuteSqlMsgResult& operator=(const ExcuteSqlMsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExcuteSqlMsgResult& default_instance();

  void Swap(ExcuteSqlMsgResult* other);

  // implements Message ----------------------------------------------

  ExcuteSqlMsgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExcuteSqlMsgResult& from);
  void MergeFrom(const ExcuteSqlMsgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string resultError = 1;
  inline bool has_resulterror() const;
  inline void clear_resulterror();
  static const int kResultErrorFieldNumber = 1;
  inline const ::std::string& resulterror() const;
  inline void set_resulterror(const ::std::string& value);
  inline void set_resulterror(const char* value);
  inline void set_resulterror(const char* value, size_t size);
  inline ::std::string* mutable_resulterror();
  inline ::std::string* release_resulterror();
  inline void set_allocated_resulterror(::std::string* resulterror);

  // @@protoc_insertion_point(class_scope:netmsg.ExcuteSqlMsgResult)
 private:
  inline void set_has_resulterror();
  inline void clear_has_resulterror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* resulterror_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static ExcuteSqlMsgResult* default_instance_;
};
// -------------------------------------------------------------------

class QueryDevSpeedMsg : public ::google::protobuf::Message {
 public:
  QueryDevSpeedMsg();
  virtual ~QueryDevSpeedMsg();

  QueryDevSpeedMsg(const QueryDevSpeedMsg& from);

  inline QueryDevSpeedMsg& operator=(const QueryDevSpeedMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryDevSpeedMsg& default_instance();

  void Swap(QueryDevSpeedMsg* other);

  // implements Message ----------------------------------------------

  QueryDevSpeedMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryDevSpeedMsg& from);
  void MergeFrom(const QueryDevSpeedMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ipStr = 1;
  inline bool has_ipstr() const;
  inline void clear_ipstr();
  static const int kIpStrFieldNumber = 1;
  inline const ::std::string& ipstr() const;
  inline void set_ipstr(const ::std::string& value);
  inline void set_ipstr(const char* value);
  inline void set_ipstr(const char* value, size_t size);
  inline ::std::string* mutable_ipstr();
  inline ::std::string* release_ipstr();
  inline void set_allocated_ipstr(::std::string* ipstr);

  // required int32 askUserID = 2;
  inline bool has_askuserid() const;
  inline void clear_askuserid();
  static const int kAskUserIDFieldNumber = 2;
  inline ::google::protobuf::int32 askuserid() const;
  inline void set_askuserid(::google::protobuf::int32 value);

  // required int64 startTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:netmsg.QueryDevSpeedMsg)
 private:
  inline void set_has_ipstr();
  inline void clear_has_ipstr();
  inline void set_has_askuserid();
  inline void clear_has_askuserid();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ipstr_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int32 askuserid_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static QueryDevSpeedMsg* default_instance_;
};
// -------------------------------------------------------------------

class QueryDevSpeedMsgResult : public ::google::protobuf::Message {
 public:
  QueryDevSpeedMsgResult();
  virtual ~QueryDevSpeedMsgResult();

  QueryDevSpeedMsgResult(const QueryDevSpeedMsgResult& from);

  inline QueryDevSpeedMsgResult& operator=(const QueryDevSpeedMsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryDevSpeedMsgResult& default_instance();

  void Swap(QueryDevSpeedMsgResult* other);

  // implements Message ----------------------------------------------

  QueryDevSpeedMsgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryDevSpeedMsgResult& from);
  void MergeFrom(const QueryDevSpeedMsgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 speed = 1;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 1;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);

  // required string resultError = 2;
  inline bool has_resulterror() const;
  inline void clear_resulterror();
  static const int kResultErrorFieldNumber = 2;
  inline const ::std::string& resulterror() const;
  inline void set_resulterror(const ::std::string& value);
  inline void set_resulterror(const char* value);
  inline void set_resulterror(const char* value, size_t size);
  inline ::std::string* mutable_resulterror();
  inline ::std::string* release_resulterror();
  inline void set_allocated_resulterror(::std::string* resulterror);

  // @@protoc_insertion_point(class_scope:netmsg.QueryDevSpeedMsgResult)
 private:
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_resulterror();
  inline void clear_has_resulterror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* resulterror_;
  ::google::protobuf::int32 speed_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static QueryDevSpeedMsgResult* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgPack

// required .netmsg.MsgHead head = 1;
inline bool MsgPack::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPack::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPack::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPack::clear_head() {
  if (head_ != NULL) head_->::netmsg::MsgHead::Clear();
  clear_has_head();
}
inline const ::netmsg::MsgHead& MsgPack::head() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::netmsg::MsgHead* MsgPack::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::netmsg::MsgHead;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.head)
  return head_;
}
inline ::netmsg::MsgHead* MsgPack::release_head() {
  clear_has_head();
  ::netmsg::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_head(::netmsg::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.head)
}

// optional .netmsg.RegistTypeMsg registtype = 2;
inline bool MsgPack::has_registtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPack::set_has_registtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPack::clear_has_registtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPack::clear_registtype() {
  if (registtype_ != NULL) registtype_->::netmsg::RegistTypeMsg::Clear();
  clear_has_registtype();
}
inline const ::netmsg::RegistTypeMsg& MsgPack::registtype() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.registtype)
  return registtype_ != NULL ? *registtype_ : *default_instance_->registtype_;
}
inline ::netmsg::RegistTypeMsg* MsgPack::mutable_registtype() {
  set_has_registtype();
  if (registtype_ == NULL) registtype_ = new ::netmsg::RegistTypeMsg;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.registtype)
  return registtype_;
}
inline ::netmsg::RegistTypeMsg* MsgPack::release_registtype() {
  clear_has_registtype();
  ::netmsg::RegistTypeMsg* temp = registtype_;
  registtype_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_registtype(::netmsg::RegistTypeMsg* registtype) {
  delete registtype_;
  registtype_ = registtype;
  if (registtype) {
    set_has_registtype();
  } else {
    clear_has_registtype();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.registtype)
}

// optional .netmsg.QueryDevCntMsg querydevcntmsg = 3;
inline bool MsgPack::has_querydevcntmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgPack::set_has_querydevcntmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgPack::clear_has_querydevcntmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgPack::clear_querydevcntmsg() {
  if (querydevcntmsg_ != NULL) querydevcntmsg_->::netmsg::QueryDevCntMsg::Clear();
  clear_has_querydevcntmsg();
}
inline const ::netmsg::QueryDevCntMsg& MsgPack::querydevcntmsg() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.querydevcntmsg)
  return querydevcntmsg_ != NULL ? *querydevcntmsg_ : *default_instance_->querydevcntmsg_;
}
inline ::netmsg::QueryDevCntMsg* MsgPack::mutable_querydevcntmsg() {
  set_has_querydevcntmsg();
  if (querydevcntmsg_ == NULL) querydevcntmsg_ = new ::netmsg::QueryDevCntMsg;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.querydevcntmsg)
  return querydevcntmsg_;
}
inline ::netmsg::QueryDevCntMsg* MsgPack::release_querydevcntmsg() {
  clear_has_querydevcntmsg();
  ::netmsg::QueryDevCntMsg* temp = querydevcntmsg_;
  querydevcntmsg_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_querydevcntmsg(::netmsg::QueryDevCntMsg* querydevcntmsg) {
  delete querydevcntmsg_;
  querydevcntmsg_ = querydevcntmsg;
  if (querydevcntmsg) {
    set_has_querydevcntmsg();
  } else {
    clear_has_querydevcntmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.querydevcntmsg)
}

// optional .netmsg.QueryDevCntMsgResult querydevcntmsgresult = 4;
inline bool MsgPack::has_querydevcntmsgresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgPack::set_has_querydevcntmsgresult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgPack::clear_has_querydevcntmsgresult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgPack::clear_querydevcntmsgresult() {
  if (querydevcntmsgresult_ != NULL) querydevcntmsgresult_->::netmsg::QueryDevCntMsgResult::Clear();
  clear_has_querydevcntmsgresult();
}
inline const ::netmsg::QueryDevCntMsgResult& MsgPack::querydevcntmsgresult() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.querydevcntmsgresult)
  return querydevcntmsgresult_ != NULL ? *querydevcntmsgresult_ : *default_instance_->querydevcntmsgresult_;
}
inline ::netmsg::QueryDevCntMsgResult* MsgPack::mutable_querydevcntmsgresult() {
  set_has_querydevcntmsgresult();
  if (querydevcntmsgresult_ == NULL) querydevcntmsgresult_ = new ::netmsg::QueryDevCntMsgResult;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.querydevcntmsgresult)
  return querydevcntmsgresult_;
}
inline ::netmsg::QueryDevCntMsgResult* MsgPack::release_querydevcntmsgresult() {
  clear_has_querydevcntmsgresult();
  ::netmsg::QueryDevCntMsgResult* temp = querydevcntmsgresult_;
  querydevcntmsgresult_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_querydevcntmsgresult(::netmsg::QueryDevCntMsgResult* querydevcntmsgresult) {
  delete querydevcntmsgresult_;
  querydevcntmsgresult_ = querydevcntmsgresult;
  if (querydevcntmsgresult) {
    set_has_querydevcntmsgresult();
  } else {
    clear_has_querydevcntmsgresult();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.querydevcntmsgresult)
}

// optional .netmsg.QueryMsg query = 5;
inline bool MsgPack::has_query() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgPack::set_has_query() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgPack::clear_has_query() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgPack::clear_query() {
  if (query_ != NULL) query_->::netmsg::QueryMsg::Clear();
  clear_has_query();
}
inline const ::netmsg::QueryMsg& MsgPack::query() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::netmsg::QueryMsg* MsgPack::mutable_query() {
  set_has_query();
  if (query_ == NULL) query_ = new ::netmsg::QueryMsg;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.query)
  return query_;
}
inline ::netmsg::QueryMsg* MsgPack::release_query() {
  clear_has_query();
  ::netmsg::QueryMsg* temp = query_;
  query_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_query(::netmsg::QueryMsg* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.query)
}

// optional .netmsg.AddMsg add = 6;
inline bool MsgPack::has_add() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgPack::set_has_add() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgPack::clear_has_add() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgPack::clear_add() {
  if (add_ != NULL) add_->::netmsg::AddMsg::Clear();
  clear_has_add();
}
inline const ::netmsg::AddMsg& MsgPack::add() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.add)
  return add_ != NULL ? *add_ : *default_instance_->add_;
}
inline ::netmsg::AddMsg* MsgPack::mutable_add() {
  set_has_add();
  if (add_ == NULL) add_ = new ::netmsg::AddMsg;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.add)
  return add_;
}
inline ::netmsg::AddMsg* MsgPack::release_add() {
  clear_has_add();
  ::netmsg::AddMsg* temp = add_;
  add_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_add(::netmsg::AddMsg* add) {
  delete add_;
  add_ = add;
  if (add) {
    set_has_add();
  } else {
    clear_has_add();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.add)
}

// optional .netmsg.QueryMsgResult querymsgresult = 7;
inline bool MsgPack::has_querymsgresult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgPack::set_has_querymsgresult() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgPack::clear_has_querymsgresult() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgPack::clear_querymsgresult() {
  if (querymsgresult_ != NULL) querymsgresult_->::netmsg::QueryMsgResult::Clear();
  clear_has_querymsgresult();
}
inline const ::netmsg::QueryMsgResult& MsgPack::querymsgresult() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.querymsgresult)
  return querymsgresult_ != NULL ? *querymsgresult_ : *default_instance_->querymsgresult_;
}
inline ::netmsg::QueryMsgResult* MsgPack::mutable_querymsgresult() {
  set_has_querymsgresult();
  if (querymsgresult_ == NULL) querymsgresult_ = new ::netmsg::QueryMsgResult;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.querymsgresult)
  return querymsgresult_;
}
inline ::netmsg::QueryMsgResult* MsgPack::release_querymsgresult() {
  clear_has_querymsgresult();
  ::netmsg::QueryMsgResult* temp = querymsgresult_;
  querymsgresult_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_querymsgresult(::netmsg::QueryMsgResult* querymsgresult) {
  delete querymsgresult_;
  querymsgresult_ = querymsgresult;
  if (querymsgresult) {
    set_has_querymsgresult();
  } else {
    clear_has_querymsgresult();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.querymsgresult)
}

// optional .netmsg.AddMsgResult addmsgresult = 8;
inline bool MsgPack::has_addmsgresult() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgPack::set_has_addmsgresult() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgPack::clear_has_addmsgresult() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgPack::clear_addmsgresult() {
  if (addmsgresult_ != NULL) addmsgresult_->::netmsg::AddMsgResult::Clear();
  clear_has_addmsgresult();
}
inline const ::netmsg::AddMsgResult& MsgPack::addmsgresult() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.addmsgresult)
  return addmsgresult_ != NULL ? *addmsgresult_ : *default_instance_->addmsgresult_;
}
inline ::netmsg::AddMsgResult* MsgPack::mutable_addmsgresult() {
  set_has_addmsgresult();
  if (addmsgresult_ == NULL) addmsgresult_ = new ::netmsg::AddMsgResult;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.addmsgresult)
  return addmsgresult_;
}
inline ::netmsg::AddMsgResult* MsgPack::release_addmsgresult() {
  clear_has_addmsgresult();
  ::netmsg::AddMsgResult* temp = addmsgresult_;
  addmsgresult_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_addmsgresult(::netmsg::AddMsgResult* addmsgresult) {
  delete addmsgresult_;
  addmsgresult_ = addmsgresult;
  if (addmsgresult) {
    set_has_addmsgresult();
  } else {
    clear_has_addmsgresult();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.addmsgresult)
}

// optional .netmsg.ExcuteSqlMsg excutesqlmsg = 9;
inline bool MsgPack::has_excutesqlmsg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgPack::set_has_excutesqlmsg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgPack::clear_has_excutesqlmsg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgPack::clear_excutesqlmsg() {
  if (excutesqlmsg_ != NULL) excutesqlmsg_->::netmsg::ExcuteSqlMsg::Clear();
  clear_has_excutesqlmsg();
}
inline const ::netmsg::ExcuteSqlMsg& MsgPack::excutesqlmsg() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.excutesqlmsg)
  return excutesqlmsg_ != NULL ? *excutesqlmsg_ : *default_instance_->excutesqlmsg_;
}
inline ::netmsg::ExcuteSqlMsg* MsgPack::mutable_excutesqlmsg() {
  set_has_excutesqlmsg();
  if (excutesqlmsg_ == NULL) excutesqlmsg_ = new ::netmsg::ExcuteSqlMsg;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.excutesqlmsg)
  return excutesqlmsg_;
}
inline ::netmsg::ExcuteSqlMsg* MsgPack::release_excutesqlmsg() {
  clear_has_excutesqlmsg();
  ::netmsg::ExcuteSqlMsg* temp = excutesqlmsg_;
  excutesqlmsg_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_excutesqlmsg(::netmsg::ExcuteSqlMsg* excutesqlmsg) {
  delete excutesqlmsg_;
  excutesqlmsg_ = excutesqlmsg;
  if (excutesqlmsg) {
    set_has_excutesqlmsg();
  } else {
    clear_has_excutesqlmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.excutesqlmsg)
}

// optional .netmsg.ExcuteSqlMsgResult excutesqlmsgresult = 10;
inline bool MsgPack::has_excutesqlmsgresult() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgPack::set_has_excutesqlmsgresult() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgPack::clear_has_excutesqlmsgresult() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgPack::clear_excutesqlmsgresult() {
  if (excutesqlmsgresult_ != NULL) excutesqlmsgresult_->::netmsg::ExcuteSqlMsgResult::Clear();
  clear_has_excutesqlmsgresult();
}
inline const ::netmsg::ExcuteSqlMsgResult& MsgPack::excutesqlmsgresult() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.excutesqlmsgresult)
  return excutesqlmsgresult_ != NULL ? *excutesqlmsgresult_ : *default_instance_->excutesqlmsgresult_;
}
inline ::netmsg::ExcuteSqlMsgResult* MsgPack::mutable_excutesqlmsgresult() {
  set_has_excutesqlmsgresult();
  if (excutesqlmsgresult_ == NULL) excutesqlmsgresult_ = new ::netmsg::ExcuteSqlMsgResult;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.excutesqlmsgresult)
  return excutesqlmsgresult_;
}
inline ::netmsg::ExcuteSqlMsgResult* MsgPack::release_excutesqlmsgresult() {
  clear_has_excutesqlmsgresult();
  ::netmsg::ExcuteSqlMsgResult* temp = excutesqlmsgresult_;
  excutesqlmsgresult_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_excutesqlmsgresult(::netmsg::ExcuteSqlMsgResult* excutesqlmsgresult) {
  delete excutesqlmsgresult_;
  excutesqlmsgresult_ = excutesqlmsgresult;
  if (excutesqlmsgresult) {
    set_has_excutesqlmsgresult();
  } else {
    clear_has_excutesqlmsgresult();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.excutesqlmsgresult)
}

// optional .netmsg.QueryDevSpeedMsg querydevspeedmsg = 11;
inline bool MsgPack::has_querydevspeedmsg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgPack::set_has_querydevspeedmsg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgPack::clear_has_querydevspeedmsg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgPack::clear_querydevspeedmsg() {
  if (querydevspeedmsg_ != NULL) querydevspeedmsg_->::netmsg::QueryDevSpeedMsg::Clear();
  clear_has_querydevspeedmsg();
}
inline const ::netmsg::QueryDevSpeedMsg& MsgPack::querydevspeedmsg() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.querydevspeedmsg)
  return querydevspeedmsg_ != NULL ? *querydevspeedmsg_ : *default_instance_->querydevspeedmsg_;
}
inline ::netmsg::QueryDevSpeedMsg* MsgPack::mutable_querydevspeedmsg() {
  set_has_querydevspeedmsg();
  if (querydevspeedmsg_ == NULL) querydevspeedmsg_ = new ::netmsg::QueryDevSpeedMsg;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.querydevspeedmsg)
  return querydevspeedmsg_;
}
inline ::netmsg::QueryDevSpeedMsg* MsgPack::release_querydevspeedmsg() {
  clear_has_querydevspeedmsg();
  ::netmsg::QueryDevSpeedMsg* temp = querydevspeedmsg_;
  querydevspeedmsg_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_querydevspeedmsg(::netmsg::QueryDevSpeedMsg* querydevspeedmsg) {
  delete querydevspeedmsg_;
  querydevspeedmsg_ = querydevspeedmsg;
  if (querydevspeedmsg) {
    set_has_querydevspeedmsg();
  } else {
    clear_has_querydevspeedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.querydevspeedmsg)
}

// optional .netmsg.QueryDevSpeedMsgResult querydevspeedmsgresult = 12;
inline bool MsgPack::has_querydevspeedmsgresult() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MsgPack::set_has_querydevspeedmsgresult() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MsgPack::clear_has_querydevspeedmsgresult() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MsgPack::clear_querydevspeedmsgresult() {
  if (querydevspeedmsgresult_ != NULL) querydevspeedmsgresult_->::netmsg::QueryDevSpeedMsgResult::Clear();
  clear_has_querydevspeedmsgresult();
}
inline const ::netmsg::QueryDevSpeedMsgResult& MsgPack::querydevspeedmsgresult() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.querydevspeedmsgresult)
  return querydevspeedmsgresult_ != NULL ? *querydevspeedmsgresult_ : *default_instance_->querydevspeedmsgresult_;
}
inline ::netmsg::QueryDevSpeedMsgResult* MsgPack::mutable_querydevspeedmsgresult() {
  set_has_querydevspeedmsgresult();
  if (querydevspeedmsgresult_ == NULL) querydevspeedmsgresult_ = new ::netmsg::QueryDevSpeedMsgResult;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.querydevspeedmsgresult)
  return querydevspeedmsgresult_;
}
inline ::netmsg::QueryDevSpeedMsgResult* MsgPack::release_querydevspeedmsgresult() {
  clear_has_querydevspeedmsgresult();
  ::netmsg::QueryDevSpeedMsgResult* temp = querydevspeedmsgresult_;
  querydevspeedmsgresult_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_querydevspeedmsgresult(::netmsg::QueryDevSpeedMsgResult* querydevspeedmsgresult) {
  delete querydevspeedmsgresult_;
  querydevspeedmsgresult_ = querydevspeedmsgresult;
  if (querydevspeedmsgresult) {
    set_has_querydevspeedmsgresult();
  } else {
    clear_has_querydevspeedmsgresult();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.querydevspeedmsgresult)
}

// -------------------------------------------------------------------

// MsgHead

// required uint32 globalPackNumber = 1 [default = 1];
inline bool MsgHead::has_globalpacknumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHead::set_has_globalpacknumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHead::clear_has_globalpacknumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHead::clear_globalpacknumber() {
  globalpacknumber_ = 1u;
  clear_has_globalpacknumber();
}
inline ::google::protobuf::uint32 MsgHead::globalpacknumber() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgHead.globalPackNumber)
  return globalpacknumber_;
}
inline void MsgHead::set_globalpacknumber(::google::protobuf::uint32 value) {
  set_has_globalpacknumber();
  globalpacknumber_ = value;
  // @@protoc_insertion_point(field_set:netmsg.MsgHead.globalPackNumber)
}

// required int32 totalPack = 2 [default = 1];
inline bool MsgHead::has_totalpack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHead::set_has_totalpack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHead::clear_has_totalpack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHead::clear_totalpack() {
  totalpack_ = 1;
  clear_has_totalpack();
}
inline ::google::protobuf::int32 MsgHead::totalpack() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgHead.totalPack)
  return totalpack_;
}
inline void MsgHead::set_totalpack(::google::protobuf::int32 value) {
  set_has_totalpack();
  totalpack_ = value;
  // @@protoc_insertion_point(field_set:netmsg.MsgHead.totalPack)
}

// required int32 packIndex = 3 [default = 1];
inline bool MsgHead::has_packindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgHead::set_has_packindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgHead::clear_has_packindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgHead::clear_packindex() {
  packindex_ = 1;
  clear_has_packindex();
}
inline ::google::protobuf::int32 MsgHead::packindex() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgHead.packIndex)
  return packindex_;
}
inline void MsgHead::set_packindex(::google::protobuf::int32 value) {
  set_has_packindex();
  packindex_ = value;
  // @@protoc_insertion_point(field_set:netmsg.MsgHead.packIndex)
}

// -------------------------------------------------------------------

// RegistTypeMsg

// required bool bDevice = 1;
inline bool RegistTypeMsg::has_bdevice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistTypeMsg::set_has_bdevice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistTypeMsg::clear_has_bdevice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistTypeMsg::clear_bdevice() {
  bdevice_ = false;
  clear_has_bdevice();
}
inline bool RegistTypeMsg::bdevice() const {
  // @@protoc_insertion_point(field_get:netmsg.RegistTypeMsg.bDevice)
  return bdevice_;
}
inline void RegistTypeMsg::set_bdevice(bool value) {
  set_has_bdevice();
  bdevice_ = value;
  // @@protoc_insertion_point(field_set:netmsg.RegistTypeMsg.bDevice)
}

// -------------------------------------------------------------------

// QueryDevCntMsg

// -------------------------------------------------------------------

// QueryDevCntMsgResult

// required int32 devCnt = 1;
inline bool QueryDevCntMsgResult::has_devcnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryDevCntMsgResult::set_has_devcnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryDevCntMsgResult::clear_has_devcnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryDevCntMsgResult::clear_devcnt() {
  devcnt_ = 0;
  clear_has_devcnt();
}
inline ::google::protobuf::int32 QueryDevCntMsgResult::devcnt() const {
  // @@protoc_insertion_point(field_get:netmsg.QueryDevCntMsgResult.devCnt)
  return devcnt_;
}
inline void QueryDevCntMsgResult::set_devcnt(::google::protobuf::int32 value) {
  set_has_devcnt();
  devcnt_ = value;
  // @@protoc_insertion_point(field_set:netmsg.QueryDevCntMsgResult.devCnt)
}

// -------------------------------------------------------------------

// QueryMsg

// required string Msg = 1;
inline bool QueryMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& QueryMsg::msg() const {
  // @@protoc_insertion_point(field_get:netmsg.QueryMsg.Msg)
  return *msg_;
}
inline void QueryMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.QueryMsg.Msg)
}
inline void QueryMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.QueryMsg.Msg)
}
inline void QueryMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.QueryMsg.Msg)
}
inline ::std::string* QueryMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.QueryMsg.Msg)
  return msg_;
}
inline ::std::string* QueryMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.QueryMsg.Msg)
}

// -------------------------------------------------------------------

// QueryMsgResult

// required string resultData = 1;
inline bool QueryMsgResult::has_resultdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryMsgResult::set_has_resultdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryMsgResult::clear_has_resultdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryMsgResult::clear_resultdata() {
  if (resultdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_->clear();
  }
  clear_has_resultdata();
}
inline const ::std::string& QueryMsgResult::resultdata() const {
  // @@protoc_insertion_point(field_get:netmsg.QueryMsgResult.resultData)
  return *resultdata_;
}
inline void QueryMsgResult::set_resultdata(const ::std::string& value) {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_ = new ::std::string;
  }
  resultdata_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.QueryMsgResult.resultData)
}
inline void QueryMsgResult::set_resultdata(const char* value) {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_ = new ::std::string;
  }
  resultdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.QueryMsgResult.resultData)
}
inline void QueryMsgResult::set_resultdata(const char* value, size_t size) {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_ = new ::std::string;
  }
  resultdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.QueryMsgResult.resultData)
}
inline ::std::string* QueryMsgResult::mutable_resultdata() {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.QueryMsgResult.resultData)
  return resultdata_;
}
inline ::std::string* QueryMsgResult::release_resultdata() {
  clear_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdata_;
    resultdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryMsgResult::set_allocated_resultdata(::std::string* resultdata) {
  if (resultdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdata_;
  }
  if (resultdata) {
    set_has_resultdata();
    resultdata_ = resultdata;
  } else {
    clear_has_resultdata();
    resultdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.QueryMsgResult.resultData)
}

// required string resultError = 2;
inline bool QueryMsgResult::has_resulterror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryMsgResult::set_has_resulterror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryMsgResult::clear_has_resulterror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryMsgResult::clear_resulterror() {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_->clear();
  }
  clear_has_resulterror();
}
inline const ::std::string& QueryMsgResult::resulterror() const {
  // @@protoc_insertion_point(field_get:netmsg.QueryMsgResult.resultError)
  return *resulterror_;
}
inline void QueryMsgResult::set_resulterror(const ::std::string& value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.QueryMsgResult.resultError)
}
inline void QueryMsgResult::set_resulterror(const char* value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.QueryMsgResult.resultError)
}
inline void QueryMsgResult::set_resulterror(const char* value, size_t size) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.QueryMsgResult.resultError)
}
inline ::std::string* QueryMsgResult::mutable_resulterror() {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.QueryMsgResult.resultError)
  return resulterror_;
}
inline ::std::string* QueryMsgResult::release_resulterror() {
  clear_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resulterror_;
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryMsgResult::set_allocated_resulterror(::std::string* resulterror) {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (resulterror) {
    set_has_resulterror();
    resulterror_ = resulterror;
  } else {
    clear_has_resulterror();
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.QueryMsgResult.resultError)
}

// -------------------------------------------------------------------

// AddMsg

// required string TableName = 1;
inline bool AddMsg::has_tablename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMsg::set_has_tablename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMsg::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMsg::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& AddMsg::tablename() const {
  // @@protoc_insertion_point(field_get:netmsg.AddMsg.TableName)
  return *tablename_;
}
inline void AddMsg::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.AddMsg.TableName)
}
inline void AddMsg::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.AddMsg.TableName)
}
inline void AddMsg::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.AddMsg.TableName)
}
inline ::std::string* AddMsg::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.AddMsg.TableName)
  return tablename_;
}
inline ::std::string* AddMsg::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddMsg::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.AddMsg.TableName)
}

// required string Msg = 2;
inline bool AddMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& AddMsg::msg() const {
  // @@protoc_insertion_point(field_get:netmsg.AddMsg.Msg)
  return *msg_;
}
inline void AddMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.AddMsg.Msg)
}
inline void AddMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.AddMsg.Msg)
}
inline void AddMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.AddMsg.Msg)
}
inline ::std::string* AddMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.AddMsg.Msg)
  return msg_;
}
inline ::std::string* AddMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.AddMsg.Msg)
}

// -------------------------------------------------------------------

// AddMsgResult

// required string resultError = 1;
inline bool AddMsgResult::has_resulterror() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMsgResult::set_has_resulterror() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMsgResult::clear_has_resulterror() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMsgResult::clear_resulterror() {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_->clear();
  }
  clear_has_resulterror();
}
inline const ::std::string& AddMsgResult::resulterror() const {
  // @@protoc_insertion_point(field_get:netmsg.AddMsgResult.resultError)
  return *resulterror_;
}
inline void AddMsgResult::set_resulterror(const ::std::string& value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.AddMsgResult.resultError)
}
inline void AddMsgResult::set_resulterror(const char* value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.AddMsgResult.resultError)
}
inline void AddMsgResult::set_resulterror(const char* value, size_t size) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.AddMsgResult.resultError)
}
inline ::std::string* AddMsgResult::mutable_resulterror() {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.AddMsgResult.resultError)
  return resulterror_;
}
inline ::std::string* AddMsgResult::release_resulterror() {
  clear_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resulterror_;
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddMsgResult::set_allocated_resulterror(::std::string* resulterror) {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (resulterror) {
    set_has_resulterror();
    resulterror_ = resulterror;
  } else {
    clear_has_resulterror();
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.AddMsgResult.resultError)
}

// -------------------------------------------------------------------

// ExcuteSqlMsg

// required string Msg = 1;
inline bool ExcuteSqlMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExcuteSqlMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExcuteSqlMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExcuteSqlMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ExcuteSqlMsg::msg() const {
  // @@protoc_insertion_point(field_get:netmsg.ExcuteSqlMsg.Msg)
  return *msg_;
}
inline void ExcuteSqlMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.ExcuteSqlMsg.Msg)
}
inline void ExcuteSqlMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.ExcuteSqlMsg.Msg)
}
inline void ExcuteSqlMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.ExcuteSqlMsg.Msg)
}
inline ::std::string* ExcuteSqlMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.ExcuteSqlMsg.Msg)
  return msg_;
}
inline ::std::string* ExcuteSqlMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExcuteSqlMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.ExcuteSqlMsg.Msg)
}

// -------------------------------------------------------------------

// ExcuteSqlMsgResult

// required string resultError = 1;
inline bool ExcuteSqlMsgResult::has_resulterror() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExcuteSqlMsgResult::set_has_resulterror() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExcuteSqlMsgResult::clear_has_resulterror() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExcuteSqlMsgResult::clear_resulterror() {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_->clear();
  }
  clear_has_resulterror();
}
inline const ::std::string& ExcuteSqlMsgResult::resulterror() const {
  // @@protoc_insertion_point(field_get:netmsg.ExcuteSqlMsgResult.resultError)
  return *resulterror_;
}
inline void ExcuteSqlMsgResult::set_resulterror(const ::std::string& value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.ExcuteSqlMsgResult.resultError)
}
inline void ExcuteSqlMsgResult::set_resulterror(const char* value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.ExcuteSqlMsgResult.resultError)
}
inline void ExcuteSqlMsgResult::set_resulterror(const char* value, size_t size) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.ExcuteSqlMsgResult.resultError)
}
inline ::std::string* ExcuteSqlMsgResult::mutable_resulterror() {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.ExcuteSqlMsgResult.resultError)
  return resulterror_;
}
inline ::std::string* ExcuteSqlMsgResult::release_resulterror() {
  clear_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resulterror_;
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExcuteSqlMsgResult::set_allocated_resulterror(::std::string* resulterror) {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (resulterror) {
    set_has_resulterror();
    resulterror_ = resulterror;
  } else {
    clear_has_resulterror();
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.ExcuteSqlMsgResult.resultError)
}

// -------------------------------------------------------------------

// QueryDevSpeedMsg

// required string ipStr = 1;
inline bool QueryDevSpeedMsg::has_ipstr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryDevSpeedMsg::set_has_ipstr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryDevSpeedMsg::clear_has_ipstr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryDevSpeedMsg::clear_ipstr() {
  if (ipstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipstr_->clear();
  }
  clear_has_ipstr();
}
inline const ::std::string& QueryDevSpeedMsg::ipstr() const {
  // @@protoc_insertion_point(field_get:netmsg.QueryDevSpeedMsg.ipStr)
  return *ipstr_;
}
inline void QueryDevSpeedMsg::set_ipstr(const ::std::string& value) {
  set_has_ipstr();
  if (ipstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipstr_ = new ::std::string;
  }
  ipstr_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.QueryDevSpeedMsg.ipStr)
}
inline void QueryDevSpeedMsg::set_ipstr(const char* value) {
  set_has_ipstr();
  if (ipstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipstr_ = new ::std::string;
  }
  ipstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.QueryDevSpeedMsg.ipStr)
}
inline void QueryDevSpeedMsg::set_ipstr(const char* value, size_t size) {
  set_has_ipstr();
  if (ipstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipstr_ = new ::std::string;
  }
  ipstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.QueryDevSpeedMsg.ipStr)
}
inline ::std::string* QueryDevSpeedMsg::mutable_ipstr() {
  set_has_ipstr();
  if (ipstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.QueryDevSpeedMsg.ipStr)
  return ipstr_;
}
inline ::std::string* QueryDevSpeedMsg::release_ipstr() {
  clear_has_ipstr();
  if (ipstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipstr_;
    ipstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryDevSpeedMsg::set_allocated_ipstr(::std::string* ipstr) {
  if (ipstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipstr_;
  }
  if (ipstr) {
    set_has_ipstr();
    ipstr_ = ipstr;
  } else {
    clear_has_ipstr();
    ipstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.QueryDevSpeedMsg.ipStr)
}

// required int32 askUserID = 2;
inline bool QueryDevSpeedMsg::has_askuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryDevSpeedMsg::set_has_askuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryDevSpeedMsg::clear_has_askuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryDevSpeedMsg::clear_askuserid() {
  askuserid_ = 0;
  clear_has_askuserid();
}
inline ::google::protobuf::int32 QueryDevSpeedMsg::askuserid() const {
  // @@protoc_insertion_point(field_get:netmsg.QueryDevSpeedMsg.askUserID)
  return askuserid_;
}
inline void QueryDevSpeedMsg::set_askuserid(::google::protobuf::int32 value) {
  set_has_askuserid();
  askuserid_ = value;
  // @@protoc_insertion_point(field_set:netmsg.QueryDevSpeedMsg.askUserID)
}

// required int64 startTime = 3;
inline bool QueryDevSpeedMsg::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryDevSpeedMsg::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryDevSpeedMsg::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryDevSpeedMsg::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 QueryDevSpeedMsg::starttime() const {
  // @@protoc_insertion_point(field_get:netmsg.QueryDevSpeedMsg.startTime)
  return starttime_;
}
inline void QueryDevSpeedMsg::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:netmsg.QueryDevSpeedMsg.startTime)
}

// -------------------------------------------------------------------

// QueryDevSpeedMsgResult

// required int32 speed = 1;
inline bool QueryDevSpeedMsgResult::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryDevSpeedMsgResult::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryDevSpeedMsgResult::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryDevSpeedMsgResult::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 QueryDevSpeedMsgResult::speed() const {
  // @@protoc_insertion_point(field_get:netmsg.QueryDevSpeedMsgResult.speed)
  return speed_;
}
inline void QueryDevSpeedMsgResult::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:netmsg.QueryDevSpeedMsgResult.speed)
}

// required string resultError = 2;
inline bool QueryDevSpeedMsgResult::has_resulterror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryDevSpeedMsgResult::set_has_resulterror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryDevSpeedMsgResult::clear_has_resulterror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryDevSpeedMsgResult::clear_resulterror() {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_->clear();
  }
  clear_has_resulterror();
}
inline const ::std::string& QueryDevSpeedMsgResult::resulterror() const {
  // @@protoc_insertion_point(field_get:netmsg.QueryDevSpeedMsgResult.resultError)
  return *resulterror_;
}
inline void QueryDevSpeedMsgResult::set_resulterror(const ::std::string& value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.QueryDevSpeedMsgResult.resultError)
}
inline void QueryDevSpeedMsgResult::set_resulterror(const char* value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.QueryDevSpeedMsgResult.resultError)
}
inline void QueryDevSpeedMsgResult::set_resulterror(const char* value, size_t size) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.QueryDevSpeedMsgResult.resultError)
}
inline ::std::string* QueryDevSpeedMsgResult::mutable_resulterror() {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.QueryDevSpeedMsgResult.resultError)
  return resulterror_;
}
inline ::std::string* QueryDevSpeedMsgResult::release_resulterror() {
  clear_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resulterror_;
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryDevSpeedMsgResult::set_allocated_resulterror(::std::string* resulterror) {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (resulterror) {
    set_has_resulterror();
    resulterror_ = resulterror;
  } else {
    clear_has_resulterror();
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.QueryDevSpeedMsgResult.resultError)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace netmsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_netmsg_2eproto__INCLUDED
