// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "netmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netmsg {

namespace {

const ::google::protobuf::Descriptor* MsgPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPack_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistTypeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistTypeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryDevCntMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDevCntMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryDevCntMsgResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDevCntMsgResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryMsgResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMsgResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMsgResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMsgResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_netmsg_2eproto() {
  protobuf_AddDesc_netmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "netmsg.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPack_descriptor_ = file->message_type(0);
  static const int MsgPack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, registtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, querydevcntmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, querydevcntmsgresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, querymsgresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, addmsgresult_),
  };
  MsgPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPack_descriptor_,
      MsgPack::default_instance_,
      MsgPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPack));
  MsgHead_descriptor_ = file->message_type(1);
  static const int MsgHead_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, globalpacknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, totalpack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, packindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, packtype_),
  };
  MsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHead_descriptor_,
      MsgHead::default_instance_,
      MsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHead));
  RegistTypeMsg_descriptor_ = file->message_type(2);
  static const int RegistTypeMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistTypeMsg, bdevice_),
  };
  RegistTypeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistTypeMsg_descriptor_,
      RegistTypeMsg::default_instance_,
      RegistTypeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistTypeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistTypeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistTypeMsg));
  QueryDevCntMsg_descriptor_ = file->message_type(3);
  static const int QueryDevCntMsg_offsets_[1] = {
  };
  QueryDevCntMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDevCntMsg_descriptor_,
      QueryDevCntMsg::default_instance_,
      QueryDevCntMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDevCntMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDevCntMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDevCntMsg));
  QueryDevCntMsgResult_descriptor_ = file->message_type(4);
  static const int QueryDevCntMsgResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDevCntMsgResult, devcnt_),
  };
  QueryDevCntMsgResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDevCntMsgResult_descriptor_,
      QueryDevCntMsgResult::default_instance_,
      QueryDevCntMsgResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDevCntMsgResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDevCntMsgResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDevCntMsgResult));
  QueryMsg_descriptor_ = file->message_type(5);
  static const int QueryMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMsg, msg_),
  };
  QueryMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryMsg_descriptor_,
      QueryMsg::default_instance_,
      QueryMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryMsg));
  QueryMsgResult_descriptor_ = file->message_type(6);
  static const int QueryMsgResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMsgResult, resultdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMsgResult, resulterror_),
  };
  QueryMsgResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryMsgResult_descriptor_,
      QueryMsgResult::default_instance_,
      QueryMsgResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMsgResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMsgResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryMsgResult));
  AddMsg_descriptor_ = file->message_type(7);
  static const int AddMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, msg_),
  };
  AddMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMsg_descriptor_,
      AddMsg::default_instance_,
      AddMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMsg));
  AddMsgResult_descriptor_ = file->message_type(8);
  static const int AddMsgResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsgResult, resulterror_),
  };
  AddMsgResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMsgResult_descriptor_,
      AddMsgResult::default_instance_,
      AddMsgResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsgResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsgResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMsgResult));
  NetMsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_netmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPack_descriptor_, &MsgPack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHead_descriptor_, &MsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistTypeMsg_descriptor_, &RegistTypeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDevCntMsg_descriptor_, &QueryDevCntMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDevCntMsgResult_descriptor_, &QueryDevCntMsgResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryMsg_descriptor_, &QueryMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryMsgResult_descriptor_, &QueryMsgResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMsg_descriptor_, &AddMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMsgResult_descriptor_, &AddMsgResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_netmsg_2eproto() {
  delete MsgPack::default_instance_;
  delete MsgPack_reflection_;
  delete MsgHead::default_instance_;
  delete MsgHead_reflection_;
  delete RegistTypeMsg::default_instance_;
  delete RegistTypeMsg_reflection_;
  delete QueryDevCntMsg::default_instance_;
  delete QueryDevCntMsg_reflection_;
  delete QueryDevCntMsgResult::default_instance_;
  delete QueryDevCntMsgResult_reflection_;
  delete QueryMsg::default_instance_;
  delete QueryMsg_reflection_;
  delete QueryMsgResult::default_instance_;
  delete QueryMsgResult_reflection_;
  delete AddMsg::default_instance_;
  delete AddMsg_reflection_;
  delete AddMsgResult::default_instance_;
  delete AddMsgResult_reflection_;
}

void protobuf_AddDesc_netmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014netmsg.proto\022\006netmsg\"\331\002\n\007MsgPack\022\035\n\004he"
    "ad\030\001 \002(\0132\017.netmsg.MsgHead\022)\n\nregisttype\030"
    "\002 \001(\0132\025.netmsg.RegistTypeMsg\022.\n\016querydev"
    "cntmsg\030\003 \001(\0132\026.netmsg.QueryDevCntMsg\022:\n\024"
    "querydevcntmsgresult\030\004 \001(\0132\034.netmsg.Quer"
    "yDevCntMsgResult\022\037\n\005query\030\005 \001(\0132\020.netmsg"
    ".QueryMsg\022\033\n\003add\030\006 \001(\0132\016.netmsg.AddMsg\022."
    "\n\016querymsgresult\030\007 \001(\0132\026.netmsg.QueryMsg"
    "Result\022*\n\014addmsgresult\030\010 \001(\0132\024.netmsg.Ad"
    "dMsgResult\"\214\001\n\007MsgHead\022\033\n\020globalPackNumb"
    "er\030\001 \002(\r:\0011\022\024\n\ttotalPack\030\002 \002(\005:\0011\022\024\n\tpac"
    "kIndex\030\003 \002(\005:\0011\0228\n\010packtype\030\004 \002(\0162\022.netm"
    "sg.NetMsgType:\022NetMsgType_Unknown\" \n\rReg"
    "istTypeMsg\022\017\n\007bDevice\030\001 \002(\010\"\020\n\016QueryDevC"
    "ntMsg\"&\n\024QueryDevCntMsgResult\022\016\n\006devCnt\030"
    "\001 \002(\005\"\027\n\010QueryMsg\022\013\n\003Msg\030\001 \002(\t\"9\n\016QueryM"
    "sgResult\022\022\n\nresultData\030\001 \002(\t\022\023\n\013resultEr"
    "ror\030\002 \002(\t\"(\n\006AddMsg\022\021\n\tTableName\030\001 \002(\t\022\013"
    "\n\003Msg\030\002 \002(\t\"#\n\014AddMsgResult\022\023\n\013resultErr"
    "or\030\001 \002(\t*\265\003\n\nNetMsgType\022\026\n\022NetMsgType_Un"
    "known\020\000\022\031\n\025NetMsgType_RegistType\020\001\022\032\n\026Ne"
    "tMsgType_QueryDevCnt\020\002\022 \n\034NetMsgType_Que"
    "ryDevCntResult\020\003\022\035\n\031NetMsgType_DatabaseA"
    "ddAsk\020\004\022!\n\035NetMsgType_DatabaseAddSuccess"
    "\020\005\022\037\n\033NetMsgType_DatabaseAddError\020\006\022 \n\034N"
    "etMsgType_DatabaseDeleteAsk\020\007\022$\n NetMsgT"
    "ype_DatabaseDeleteSuccess\020\010\022\"\n\036NetMsgTyp"
    "e_DatabaseDeleteError\020\t\022\037\n\033NetMsgType_Da"
    "tabaseQueryAsk\020\n\022#\n\037NetMsgType_DatabaseQ"
    "uerySuccess\020\013\022!\n\035NetMsgType_DatabaseQuer"
    "yError\020\014", 1208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netmsg.proto", &protobuf_RegisterTypes);
  MsgPack::default_instance_ = new MsgPack();
  MsgHead::default_instance_ = new MsgHead();
  RegistTypeMsg::default_instance_ = new RegistTypeMsg();
  QueryDevCntMsg::default_instance_ = new QueryDevCntMsg();
  QueryDevCntMsgResult::default_instance_ = new QueryDevCntMsgResult();
  QueryMsg::default_instance_ = new QueryMsg();
  QueryMsgResult::default_instance_ = new QueryMsgResult();
  AddMsg::default_instance_ = new AddMsg();
  AddMsgResult::default_instance_ = new AddMsgResult();
  MsgPack::default_instance_->InitAsDefaultInstance();
  MsgHead::default_instance_->InitAsDefaultInstance();
  RegistTypeMsg::default_instance_->InitAsDefaultInstance();
  QueryDevCntMsg::default_instance_->InitAsDefaultInstance();
  QueryDevCntMsgResult::default_instance_->InitAsDefaultInstance();
  QueryMsg::default_instance_->InitAsDefaultInstance();
  QueryMsgResult::default_instance_->InitAsDefaultInstance();
  AddMsg::default_instance_->InitAsDefaultInstance();
  AddMsgResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_netmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_netmsg_2eproto {
  StaticDescriptorInitializer_netmsg_2eproto() {
    protobuf_AddDesc_netmsg_2eproto();
  }
} static_descriptor_initializer_netmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* NetMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetMsgType_descriptor_;
}
bool NetMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPack::kHeadFieldNumber;
const int MsgPack::kRegisttypeFieldNumber;
const int MsgPack::kQuerydevcntmsgFieldNumber;
const int MsgPack::kQuerydevcntmsgresultFieldNumber;
const int MsgPack::kQueryFieldNumber;
const int MsgPack::kAddFieldNumber;
const int MsgPack::kQuerymsgresultFieldNumber;
const int MsgPack::kAddmsgresultFieldNumber;
#endif  // !_MSC_VER

MsgPack::MsgPack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.MsgPack)
}

void MsgPack::InitAsDefaultInstance() {
  head_ = const_cast< ::netmsg::MsgHead*>(&::netmsg::MsgHead::default_instance());
  registtype_ = const_cast< ::netmsg::RegistTypeMsg*>(&::netmsg::RegistTypeMsg::default_instance());
  querydevcntmsg_ = const_cast< ::netmsg::QueryDevCntMsg*>(&::netmsg::QueryDevCntMsg::default_instance());
  querydevcntmsgresult_ = const_cast< ::netmsg::QueryDevCntMsgResult*>(&::netmsg::QueryDevCntMsgResult::default_instance());
  query_ = const_cast< ::netmsg::QueryMsg*>(&::netmsg::QueryMsg::default_instance());
  add_ = const_cast< ::netmsg::AddMsg*>(&::netmsg::AddMsg::default_instance());
  querymsgresult_ = const_cast< ::netmsg::QueryMsgResult*>(&::netmsg::QueryMsgResult::default_instance());
  addmsgresult_ = const_cast< ::netmsg::AddMsgResult*>(&::netmsg::AddMsgResult::default_instance());
}

MsgPack::MsgPack(const MsgPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.MsgPack)
}

void MsgPack::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  registtype_ = NULL;
  querydevcntmsg_ = NULL;
  querydevcntmsgresult_ = NULL;
  query_ = NULL;
  add_ = NULL;
  querymsgresult_ = NULL;
  addmsgresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPack::~MsgPack() {
  // @@protoc_insertion_point(destructor:netmsg.MsgPack)
  SharedDtor();
}

void MsgPack::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete registtype_;
    delete querydevcntmsg_;
    delete querydevcntmsgresult_;
    delete query_;
    delete add_;
    delete querymsgresult_;
    delete addmsgresult_;
  }
}

void MsgPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPack_descriptor_;
}

const MsgPack& MsgPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

MsgPack* MsgPack::default_instance_ = NULL;

MsgPack* MsgPack::New() const {
  return new MsgPack;
}

void MsgPack::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_head()) {
      if (head_ != NULL) head_->::netmsg::MsgHead::Clear();
    }
    if (has_registtype()) {
      if (registtype_ != NULL) registtype_->::netmsg::RegistTypeMsg::Clear();
    }
    if (has_querydevcntmsg()) {
      if (querydevcntmsg_ != NULL) querydevcntmsg_->::netmsg::QueryDevCntMsg::Clear();
    }
    if (has_querydevcntmsgresult()) {
      if (querydevcntmsgresult_ != NULL) querydevcntmsgresult_->::netmsg::QueryDevCntMsgResult::Clear();
    }
    if (has_query()) {
      if (query_ != NULL) query_->::netmsg::QueryMsg::Clear();
    }
    if (has_add()) {
      if (add_ != NULL) add_->::netmsg::AddMsg::Clear();
    }
    if (has_querymsgresult()) {
      if (querymsgresult_ != NULL) querymsgresult_->::netmsg::QueryMsgResult::Clear();
    }
    if (has_addmsgresult()) {
      if (addmsgresult_ != NULL) addmsgresult_->::netmsg::AddMsgResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.MsgPack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .netmsg.MsgHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_registtype;
        break;
      }

      // optional .netmsg.RegistTypeMsg registtype = 2;
      case 2: {
        if (tag == 18) {
         parse_registtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registtype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_querydevcntmsg;
        break;
      }

      // optional .netmsg.QueryDevCntMsg querydevcntmsg = 3;
      case 3: {
        if (tag == 26) {
         parse_querydevcntmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querydevcntmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_querydevcntmsgresult;
        break;
      }

      // optional .netmsg.QueryDevCntMsgResult querydevcntmsgresult = 4;
      case 4: {
        if (tag == 34) {
         parse_querydevcntmsgresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querydevcntmsgresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_query;
        break;
      }

      // optional .netmsg.QueryMsg query = 5;
      case 5: {
        if (tag == 42) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_add;
        break;
      }

      // optional .netmsg.AddMsg add = 6;
      case 6: {
        if (tag == 50) {
         parse_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_querymsgresult;
        break;
      }

      // optional .netmsg.QueryMsgResult querymsgresult = 7;
      case 7: {
        if (tag == 58) {
         parse_querymsgresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querymsgresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_addmsgresult;
        break;
      }

      // optional .netmsg.AddMsgResult addmsgresult = 8;
      case 8: {
        if (tag == 66) {
         parse_addmsgresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addmsgresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.MsgPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.MsgPack)
  return false;
#undef DO_
}

void MsgPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.MsgPack)
  // required .netmsg.MsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional .netmsg.RegistTypeMsg registtype = 2;
  if (has_registtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registtype(), output);
  }

  // optional .netmsg.QueryDevCntMsg querydevcntmsg = 3;
  if (has_querydevcntmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->querydevcntmsg(), output);
  }

  // optional .netmsg.QueryDevCntMsgResult querydevcntmsgresult = 4;
  if (has_querydevcntmsgresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->querydevcntmsgresult(), output);
  }

  // optional .netmsg.QueryMsg query = 5;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->query(), output);
  }

  // optional .netmsg.AddMsg add = 6;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->add(), output);
  }

  // optional .netmsg.QueryMsgResult querymsgresult = 7;
  if (has_querymsgresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->querymsgresult(), output);
  }

  // optional .netmsg.AddMsgResult addmsgresult = 8;
  if (has_addmsgresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->addmsgresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.MsgPack)
}

::google::protobuf::uint8* MsgPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.MsgPack)
  // required .netmsg.MsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional .netmsg.RegistTypeMsg registtype = 2;
  if (has_registtype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registtype(), target);
  }

  // optional .netmsg.QueryDevCntMsg querydevcntmsg = 3;
  if (has_querydevcntmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->querydevcntmsg(), target);
  }

  // optional .netmsg.QueryDevCntMsgResult querydevcntmsgresult = 4;
  if (has_querydevcntmsgresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->querydevcntmsgresult(), target);
  }

  // optional .netmsg.QueryMsg query = 5;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->query(), target);
  }

  // optional .netmsg.AddMsg add = 6;
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->add(), target);
  }

  // optional .netmsg.QueryMsgResult querymsgresult = 7;
  if (has_querymsgresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->querymsgresult(), target);
  }

  // optional .netmsg.AddMsgResult addmsgresult = 8;
  if (has_addmsgresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->addmsgresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.MsgPack)
  return target;
}

int MsgPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .netmsg.MsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional .netmsg.RegistTypeMsg registtype = 2;
    if (has_registtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registtype());
    }

    // optional .netmsg.QueryDevCntMsg querydevcntmsg = 3;
    if (has_querydevcntmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querydevcntmsg());
    }

    // optional .netmsg.QueryDevCntMsgResult querydevcntmsgresult = 4;
    if (has_querydevcntmsgresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querydevcntmsgresult());
    }

    // optional .netmsg.QueryMsg query = 5;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }

    // optional .netmsg.AddMsg add = 6;
    if (has_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add());
    }

    // optional .netmsg.QueryMsgResult querymsgresult = 7;
    if (has_querymsgresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querymsgresult());
    }

    // optional .netmsg.AddMsgResult addmsgresult = 8;
    if (has_addmsgresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addmsgresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPack::MergeFrom(const MsgPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::netmsg::MsgHead::MergeFrom(from.head());
    }
    if (from.has_registtype()) {
      mutable_registtype()->::netmsg::RegistTypeMsg::MergeFrom(from.registtype());
    }
    if (from.has_querydevcntmsg()) {
      mutable_querydevcntmsg()->::netmsg::QueryDevCntMsg::MergeFrom(from.querydevcntmsg());
    }
    if (from.has_querydevcntmsgresult()) {
      mutable_querydevcntmsgresult()->::netmsg::QueryDevCntMsgResult::MergeFrom(from.querydevcntmsgresult());
    }
    if (from.has_query()) {
      mutable_query()->::netmsg::QueryMsg::MergeFrom(from.query());
    }
    if (from.has_add()) {
      mutable_add()->::netmsg::AddMsg::MergeFrom(from.add());
    }
    if (from.has_querymsgresult()) {
      mutable_querymsgresult()->::netmsg::QueryMsgResult::MergeFrom(from.querymsgresult());
    }
    if (from.has_addmsgresult()) {
      mutable_addmsgresult()->::netmsg::AddMsgResult::MergeFrom(from.addmsgresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPack::CopyFrom(const MsgPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_registtype()) {
    if (!this->registtype().IsInitialized()) return false;
  }
  if (has_querydevcntmsgresult()) {
    if (!this->querydevcntmsgresult().IsInitialized()) return false;
  }
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (has_add()) {
    if (!this->add().IsInitialized()) return false;
  }
  if (has_querymsgresult()) {
    if (!this->querymsgresult().IsInitialized()) return false;
  }
  if (has_addmsgresult()) {
    if (!this->addmsgresult().IsInitialized()) return false;
  }
  return true;
}

void MsgPack::Swap(MsgPack* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(registtype_, other->registtype_);
    std::swap(querydevcntmsg_, other->querydevcntmsg_);
    std::swap(querydevcntmsgresult_, other->querydevcntmsgresult_);
    std::swap(query_, other->query_);
    std::swap(add_, other->add_);
    std::swap(querymsgresult_, other->querymsgresult_);
    std::swap(addmsgresult_, other->addmsgresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPack_descriptor_;
  metadata.reflection = MsgPack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHead::kGlobalPackNumberFieldNumber;
const int MsgHead::kTotalPackFieldNumber;
const int MsgHead::kPackIndexFieldNumber;
const int MsgHead::kPacktypeFieldNumber;
#endif  // !_MSC_VER

MsgHead::MsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.MsgHead)
}

void MsgHead::InitAsDefaultInstance() {
}

MsgHead::MsgHead(const MsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.MsgHead)
}

void MsgHead::SharedCtor() {
  _cached_size_ = 0;
  globalpacknumber_ = 1u;
  totalpack_ = 1;
  packindex_ = 1;
  packtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHead::~MsgHead() {
  // @@protoc_insertion_point(destructor:netmsg.MsgHead)
  SharedDtor();
}

void MsgHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHead_descriptor_;
}

const MsgHead& MsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

MsgHead* MsgHead::default_instance_ = NULL;

MsgHead* MsgHead::New() const {
  return new MsgHead;
}

void MsgHead::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    globalpacknumber_ = 1u;
    totalpack_ = 1;
    packindex_ = 1;
    packtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.MsgHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 globalPackNumber = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &globalpacknumber_)));
          set_has_globalpacknumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalPack;
        break;
      }

      // required int32 totalPack = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_totalPack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalpack_)));
          set_has_totalpack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_packIndex;
        break;
      }

      // required int32 packIndex = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_packIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packindex_)));
          set_has_packindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_packtype;
        break;
      }

      // required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
      case 4: {
        if (tag == 32) {
         parse_packtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::netmsg::NetMsgType_IsValid(value)) {
            set_packtype(static_cast< ::netmsg::NetMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.MsgHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.MsgHead)
  return false;
#undef DO_
}

void MsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.MsgHead)
  // required uint32 globalPackNumber = 1 [default = 1];
  if (has_globalpacknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->globalpacknumber(), output);
  }

  // required int32 totalPack = 2 [default = 1];
  if (has_totalpack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalpack(), output);
  }

  // required int32 packIndex = 3 [default = 1];
  if (has_packindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->packindex(), output);
  }

  // required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
  if (has_packtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->packtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.MsgHead)
}

::google::protobuf::uint8* MsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.MsgHead)
  // required uint32 globalPackNumber = 1 [default = 1];
  if (has_globalpacknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->globalpacknumber(), target);
  }

  // required int32 totalPack = 2 [default = 1];
  if (has_totalpack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalpack(), target);
  }

  // required int32 packIndex = 3 [default = 1];
  if (has_packindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->packindex(), target);
  }

  // required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
  if (has_packtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->packtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.MsgHead)
  return target;
}

int MsgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 globalPackNumber = 1 [default = 1];
    if (has_globalpacknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->globalpacknumber());
    }

    // required int32 totalPack = 2 [default = 1];
    if (has_totalpack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalpack());
    }

    // required int32 packIndex = 3 [default = 1];
    if (has_packindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packindex());
    }

    // required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
    if (has_packtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHead::MergeFrom(const MsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globalpacknumber()) {
      set_globalpacknumber(from.globalpacknumber());
    }
    if (from.has_totalpack()) {
      set_totalpack(from.totalpack());
    }
    if (from.has_packindex()) {
      set_packindex(from.packindex());
    }
    if (from.has_packtype()) {
      set_packtype(from.packtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHead::CopyFrom(const MsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MsgHead::Swap(MsgHead* other) {
  if (other != this) {
    std::swap(globalpacknumber_, other->globalpacknumber_);
    std::swap(totalpack_, other->totalpack_);
    std::swap(packindex_, other->packindex_);
    std::swap(packtype_, other->packtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHead_descriptor_;
  metadata.reflection = MsgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistTypeMsg::kBDeviceFieldNumber;
#endif  // !_MSC_VER

RegistTypeMsg::RegistTypeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.RegistTypeMsg)
}

void RegistTypeMsg::InitAsDefaultInstance() {
}

RegistTypeMsg::RegistTypeMsg(const RegistTypeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.RegistTypeMsg)
}

void RegistTypeMsg::SharedCtor() {
  _cached_size_ = 0;
  bdevice_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistTypeMsg::~RegistTypeMsg() {
  // @@protoc_insertion_point(destructor:netmsg.RegistTypeMsg)
  SharedDtor();
}

void RegistTypeMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegistTypeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistTypeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistTypeMsg_descriptor_;
}

const RegistTypeMsg& RegistTypeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

RegistTypeMsg* RegistTypeMsg::default_instance_ = NULL;

RegistTypeMsg* RegistTypeMsg::New() const {
  return new RegistTypeMsg;
}

void RegistTypeMsg::Clear() {
  bdevice_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistTypeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.RegistTypeMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool bDevice = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bdevice_)));
          set_has_bdevice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.RegistTypeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.RegistTypeMsg)
  return false;
#undef DO_
}

void RegistTypeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.RegistTypeMsg)
  // required bool bDevice = 1;
  if (has_bdevice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bdevice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.RegistTypeMsg)
}

::google::protobuf::uint8* RegistTypeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.RegistTypeMsg)
  // required bool bDevice = 1;
  if (has_bdevice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bdevice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.RegistTypeMsg)
  return target;
}

int RegistTypeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool bDevice = 1;
    if (has_bdevice()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistTypeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistTypeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistTypeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistTypeMsg::MergeFrom(const RegistTypeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bdevice()) {
      set_bdevice(from.bdevice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistTypeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistTypeMsg::CopyFrom(const RegistTypeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistTypeMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegistTypeMsg::Swap(RegistTypeMsg* other) {
  if (other != this) {
    std::swap(bdevice_, other->bdevice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistTypeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistTypeMsg_descriptor_;
  metadata.reflection = RegistTypeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QueryDevCntMsg::QueryDevCntMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.QueryDevCntMsg)
}

void QueryDevCntMsg::InitAsDefaultInstance() {
}

QueryDevCntMsg::QueryDevCntMsg(const QueryDevCntMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.QueryDevCntMsg)
}

void QueryDevCntMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDevCntMsg::~QueryDevCntMsg() {
  // @@protoc_insertion_point(destructor:netmsg.QueryDevCntMsg)
  SharedDtor();
}

void QueryDevCntMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryDevCntMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDevCntMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDevCntMsg_descriptor_;
}

const QueryDevCntMsg& QueryDevCntMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

QueryDevCntMsg* QueryDevCntMsg::default_instance_ = NULL;

QueryDevCntMsg* QueryDevCntMsg::New() const {
  return new QueryDevCntMsg;
}

void QueryDevCntMsg::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDevCntMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.QueryDevCntMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.QueryDevCntMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.QueryDevCntMsg)
  return false;
#undef DO_
}

void QueryDevCntMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.QueryDevCntMsg)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.QueryDevCntMsg)
}

::google::protobuf::uint8* QueryDevCntMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.QueryDevCntMsg)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.QueryDevCntMsg)
  return target;
}

int QueryDevCntMsg::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDevCntMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDevCntMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDevCntMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDevCntMsg::MergeFrom(const QueryDevCntMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDevCntMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDevCntMsg::CopyFrom(const QueryDevCntMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDevCntMsg::IsInitialized() const {

  return true;
}

void QueryDevCntMsg::Swap(QueryDevCntMsg* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDevCntMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDevCntMsg_descriptor_;
  metadata.reflection = QueryDevCntMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryDevCntMsgResult::kDevCntFieldNumber;
#endif  // !_MSC_VER

QueryDevCntMsgResult::QueryDevCntMsgResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.QueryDevCntMsgResult)
}

void QueryDevCntMsgResult::InitAsDefaultInstance() {
}

QueryDevCntMsgResult::QueryDevCntMsgResult(const QueryDevCntMsgResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.QueryDevCntMsgResult)
}

void QueryDevCntMsgResult::SharedCtor() {
  _cached_size_ = 0;
  devcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDevCntMsgResult::~QueryDevCntMsgResult() {
  // @@protoc_insertion_point(destructor:netmsg.QueryDevCntMsgResult)
  SharedDtor();
}

void QueryDevCntMsgResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryDevCntMsgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDevCntMsgResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDevCntMsgResult_descriptor_;
}

const QueryDevCntMsgResult& QueryDevCntMsgResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

QueryDevCntMsgResult* QueryDevCntMsgResult::default_instance_ = NULL;

QueryDevCntMsgResult* QueryDevCntMsgResult::New() const {
  return new QueryDevCntMsgResult;
}

void QueryDevCntMsgResult::Clear() {
  devcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDevCntMsgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.QueryDevCntMsgResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 devCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devcnt_)));
          set_has_devcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.QueryDevCntMsgResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.QueryDevCntMsgResult)
  return false;
#undef DO_
}

void QueryDevCntMsgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.QueryDevCntMsgResult)
  // required int32 devCnt = 1;
  if (has_devcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->devcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.QueryDevCntMsgResult)
}

::google::protobuf::uint8* QueryDevCntMsgResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.QueryDevCntMsgResult)
  // required int32 devCnt = 1;
  if (has_devcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->devcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.QueryDevCntMsgResult)
  return target;
}

int QueryDevCntMsgResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 devCnt = 1;
    if (has_devcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDevCntMsgResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDevCntMsgResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDevCntMsgResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDevCntMsgResult::MergeFrom(const QueryDevCntMsgResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devcnt()) {
      set_devcnt(from.devcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDevCntMsgResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDevCntMsgResult::CopyFrom(const QueryDevCntMsgResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDevCntMsgResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryDevCntMsgResult::Swap(QueryDevCntMsgResult* other) {
  if (other != this) {
    std::swap(devcnt_, other->devcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDevCntMsgResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDevCntMsgResult_descriptor_;
  metadata.reflection = QueryDevCntMsgResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

QueryMsg::QueryMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.QueryMsg)
}

void QueryMsg::InitAsDefaultInstance() {
}

QueryMsg::QueryMsg(const QueryMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.QueryMsg)
}

void QueryMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMsg::~QueryMsg() {
  // @@protoc_insertion_point(destructor:netmsg.QueryMsg)
  SharedDtor();
}

void QueryMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void QueryMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMsg_descriptor_;
}

const QueryMsg& QueryMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

QueryMsg* QueryMsg::default_instance_ = NULL;

QueryMsg* QueryMsg::New() const {
  return new QueryMsg;
}

void QueryMsg::Clear() {
  if (has_msg()) {
    if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      msg_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.QueryMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.QueryMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.QueryMsg)
  return false;
#undef DO_
}

void QueryMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.QueryMsg)
  // required string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.QueryMsg)
}

::google::protobuf::uint8* QueryMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.QueryMsg)
  // required string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.QueryMsg)
  return target;
}

int QueryMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryMsg::MergeFrom(const QueryMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMsg::CopyFrom(const QueryMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryMsg::Swap(QueryMsg* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMsg_descriptor_;
  metadata.reflection = QueryMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMsgResult::kResultDataFieldNumber;
const int QueryMsgResult::kResultErrorFieldNumber;
#endif  // !_MSC_VER

QueryMsgResult::QueryMsgResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.QueryMsgResult)
}

void QueryMsgResult::InitAsDefaultInstance() {
}

QueryMsgResult::QueryMsgResult(const QueryMsgResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.QueryMsgResult)
}

void QueryMsgResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resultdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMsgResult::~QueryMsgResult() {
  // @@protoc_insertion_point(destructor:netmsg.QueryMsgResult)
  SharedDtor();
}

void QueryMsgResult::SharedDtor() {
  if (resultdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdata_;
  }
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (this != default_instance_) {
  }
}

void QueryMsgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMsgResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMsgResult_descriptor_;
}

const QueryMsgResult& QueryMsgResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

QueryMsgResult* QueryMsgResult::default_instance_ = NULL;

QueryMsgResult* QueryMsgResult::New() const {
  return new QueryMsgResult;
}

void QueryMsgResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_resultdata()) {
      if (resultdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdata_->clear();
      }
    }
    if (has_resulterror()) {
      if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resulterror_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryMsgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.QueryMsgResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resultData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resultdata().data(), this->resultdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resultError;
        break;
      }

      // required string resultError = 2;
      case 2: {
        if (tag == 18) {
         parse_resultError:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resulterror()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resulterror().data(), this->resulterror().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resulterror");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.QueryMsgResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.QueryMsgResult)
  return false;
#undef DO_
}

void QueryMsgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.QueryMsgResult)
  // required string resultData = 1;
  if (has_resultdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdata().data(), this->resultdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resultdata(), output);
  }

  // required string resultError = 2;
  if (has_resulterror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulterror().data(), this->resulterror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulterror");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resulterror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.QueryMsgResult)
}

::google::protobuf::uint8* QueryMsgResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.QueryMsgResult)
  // required string resultData = 1;
  if (has_resultdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdata().data(), this->resultdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resultdata(), target);
  }

  // required string resultError = 2;
  if (has_resulterror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulterror().data(), this->resulterror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulterror");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resulterror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.QueryMsgResult)
  return target;
}

int QueryMsgResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resultData = 1;
    if (has_resultdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resultdata());
    }

    // required string resultError = 2;
    if (has_resulterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resulterror());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMsgResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryMsgResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryMsgResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryMsgResult::MergeFrom(const QueryMsgResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultdata()) {
      set_resultdata(from.resultdata());
    }
    if (from.has_resulterror()) {
      set_resulterror(from.resulterror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryMsgResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMsgResult::CopyFrom(const QueryMsgResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMsgResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryMsgResult::Swap(QueryMsgResult* other) {
  if (other != this) {
    std::swap(resultdata_, other->resultdata_);
    std::swap(resulterror_, other->resulterror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryMsgResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMsgResult_descriptor_;
  metadata.reflection = QueryMsgResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMsg::kTableNameFieldNumber;
const int AddMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

AddMsg::AddMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AddMsg)
}

void AddMsg::InitAsDefaultInstance() {
}

AddMsg::AddMsg(const AddMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AddMsg)
}

void AddMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMsg::~AddMsg() {
  // @@protoc_insertion_point(destructor:netmsg.AddMsg)
  SharedDtor();
}

void AddMsg::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void AddMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMsg_descriptor_;
}

const AddMsg& AddMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

AddMsg* AddMsg::default_instance_ = NULL;

AddMsg* AddMsg::New() const {
  return new AddMsg;
}

void AddMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablename_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AddMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TableName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // required string Msg = 2;
      case 2: {
        if (tag == 18) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AddMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AddMsg)
  return false;
#undef DO_
}

void AddMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AddMsg)
  // required string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablename(), output);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AddMsg)
}

::google::protobuf::uint8* AddMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AddMsg)
  // required string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablename(), target);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AddMsg)
  return target;
}

int AddMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TableName = 1;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // required string Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMsg::MergeFrom(const AddMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMsg::CopyFrom(const AddMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddMsg::Swap(AddMsg* other) {
  if (other != this) {
    std::swap(tablename_, other->tablename_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMsg_descriptor_;
  metadata.reflection = AddMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMsgResult::kResultErrorFieldNumber;
#endif  // !_MSC_VER

AddMsgResult::AddMsgResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AddMsgResult)
}

void AddMsgResult::InitAsDefaultInstance() {
}

AddMsgResult::AddMsgResult(const AddMsgResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AddMsgResult)
}

void AddMsgResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMsgResult::~AddMsgResult() {
  // @@protoc_insertion_point(destructor:netmsg.AddMsgResult)
  SharedDtor();
}

void AddMsgResult::SharedDtor() {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (this != default_instance_) {
  }
}

void AddMsgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMsgResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMsgResult_descriptor_;
}

const AddMsgResult& AddMsgResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

AddMsgResult* AddMsgResult::default_instance_ = NULL;

AddMsgResult* AddMsgResult::New() const {
  return new AddMsgResult;
}

void AddMsgResult::Clear() {
  if (has_resulterror()) {
    if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      resulterror_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMsgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AddMsgResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resultError = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resulterror()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resulterror().data(), this->resulterror().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resulterror");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AddMsgResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AddMsgResult)
  return false;
#undef DO_
}

void AddMsgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AddMsgResult)
  // required string resultError = 1;
  if (has_resulterror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulterror().data(), this->resulterror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulterror");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resulterror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AddMsgResult)
}

::google::protobuf::uint8* AddMsgResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AddMsgResult)
  // required string resultError = 1;
  if (has_resulterror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulterror().data(), this->resulterror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulterror");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resulterror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AddMsgResult)
  return target;
}

int AddMsgResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resultError = 1;
    if (has_resulterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resulterror());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMsgResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMsgResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMsgResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMsgResult::MergeFrom(const AddMsgResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resulterror()) {
      set_resulterror(from.resulterror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMsgResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMsgResult::CopyFrom(const AddMsgResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMsgResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddMsgResult::Swap(AddMsgResult* other) {
  if (other != this) {
    std::swap(resulterror_, other->resulterror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMsgResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMsgResult_descriptor_;
  metadata.reflection = AddMsgResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace netmsg

// @@protoc_insertion_point(global_scope)
