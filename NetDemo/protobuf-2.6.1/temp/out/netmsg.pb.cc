// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "netmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netmsg {

namespace {

const ::google::protobuf::Descriptor* MsgPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPack_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryMsgResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryMsgResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAddMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAddMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAddMsgResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAddMsgResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_netmsg_2eproto() {
  protobuf_AddDesc_netmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "netmsg.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPack_descriptor_ = file->message_type(0);
  static const int MsgPack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, msgquery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, msgadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, msgquerymsgresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, msgaddmsgresult_),
  };
  MsgPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPack_descriptor_,
      MsgPack::default_instance_,
      MsgPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPack));
  MsgHead_descriptor_ = file->message_type(1);
  static const int MsgHead_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, globalpacknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, totalpack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, packindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, packtype_),
  };
  MsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHead_descriptor_,
      MsgHead::default_instance_,
      MsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHead));
  MsgQueryMsg_descriptor_ = file->message_type(2);
  static const int MsgQueryMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMsg, msg_),
  };
  MsgQueryMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryMsg_descriptor_,
      MsgQueryMsg::default_instance_,
      MsgQueryMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryMsg));
  MsgQueryMsgResult_descriptor_ = file->message_type(3);
  static const int MsgQueryMsgResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMsgResult, resultdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMsgResult, resulterror_),
  };
  MsgQueryMsgResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryMsgResult_descriptor_,
      MsgQueryMsgResult::default_instance_,
      MsgQueryMsgResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMsgResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMsgResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryMsgResult));
  MsgAddMsg_descriptor_ = file->message_type(4);
  static const int MsgAddMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddMsg, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddMsg, msg_),
  };
  MsgAddMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAddMsg_descriptor_,
      MsgAddMsg::default_instance_,
      MsgAddMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAddMsg));
  MsgAddMsgResult_descriptor_ = file->message_type(5);
  static const int MsgAddMsgResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddMsgResult, resulterror_),
  };
  MsgAddMsgResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAddMsgResult_descriptor_,
      MsgAddMsgResult::default_instance_,
      MsgAddMsgResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddMsgResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddMsgResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAddMsgResult));
  NetMsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_netmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPack_descriptor_, &MsgPack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHead_descriptor_, &MsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryMsg_descriptor_, &MsgQueryMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryMsgResult_descriptor_, &MsgQueryMsgResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAddMsg_descriptor_, &MsgAddMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAddMsgResult_descriptor_, &MsgAddMsgResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_netmsg_2eproto() {
  delete MsgPack::default_instance_;
  delete MsgPack_reflection_;
  delete MsgHead::default_instance_;
  delete MsgHead_reflection_;
  delete MsgQueryMsg::default_instance_;
  delete MsgQueryMsg_reflection_;
  delete MsgQueryMsgResult::default_instance_;
  delete MsgQueryMsgResult_reflection_;
  delete MsgAddMsg::default_instance_;
  delete MsgAddMsg_reflection_;
  delete MsgAddMsgResult::default_instance_;
  delete MsgAddMsgResult_reflection_;
}

void protobuf_AddDesc_netmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014netmsg.proto\022\006netmsg\"\332\001\n\007MsgPack\022\035\n\004he"
    "ad\030\001 \002(\0132\017.netmsg.MsgHead\022%\n\010msgquery\030\002 "
    "\001(\0132\023.netmsg.MsgQueryMsg\022!\n\006msgadd\030\003 \001(\013"
    "2\021.netmsg.MsgAddMsg\0224\n\021msgquerymsgresult"
    "\030\004 \001(\0132\031.netmsg.MsgQueryMsgResult\0220\n\017msg"
    "addmsgresult\030\005 \001(\0132\027.netmsg.MsgAddMsgRes"
    "ult\"\214\001\n\007MsgHead\022\033\n\020globalPackNumber\030\001 \002("
    "\r:\0011\022\024\n\ttotalPack\030\002 \002(\005:\0011\022\024\n\tpackIndex\030"
    "\003 \002(\005:\0011\0228\n\010packtype\030\004 \002(\0162\022.netmsg.NetM"
    "sgType:\022NetMsgType_Unknown\"\032\n\013MsgQueryMs"
    "g\022\013\n\003Msg\030\001 \002(\t\"<\n\021MsgQueryMsgResult\022\022\n\nr"
    "esultData\030\001 \002(\t\022\023\n\013resultError\030\002 \002(\t\"+\n\t"
    "MsgAddMsg\022\021\n\tTableName\030\001 \002(\t\022\013\n\003Msg\030\002 \002("
    "\t\"&\n\017MsgAddMsgResult\022\023\n\013resultError\030\001 \002("
    "\t*\334\002\n\nNetMsgType\022\026\n\022NetMsgType_Unknown\020\000"
    "\022\035\n\031NetMsgType_DatabaseAddAsk\020\001\022!\n\035NetMs"
    "gType_DatabaseAddSuccess\020\002\022\037\n\033NetMsgType"
    "_DatabaseAddError\020\003\022 \n\034NetMsgType_Databa"
    "seDeleteAsk\020\004\022$\n NetMsgType_DatabaseDele"
    "teSuccess\020\005\022\"\n\036NetMsgType_DatabaseDelete"
    "Error\020\006\022\037\n\033NetMsgType_DatabaseQueryAsk\020\007"
    "\022#\n\037NetMsgType_DatabaseQuerySuccess\020\010\022!\n"
    "\035NetMsgType_DatabaseQueryError\020\t", 912);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netmsg.proto", &protobuf_RegisterTypes);
  MsgPack::default_instance_ = new MsgPack();
  MsgHead::default_instance_ = new MsgHead();
  MsgQueryMsg::default_instance_ = new MsgQueryMsg();
  MsgQueryMsgResult::default_instance_ = new MsgQueryMsgResult();
  MsgAddMsg::default_instance_ = new MsgAddMsg();
  MsgAddMsgResult::default_instance_ = new MsgAddMsgResult();
  MsgPack::default_instance_->InitAsDefaultInstance();
  MsgHead::default_instance_->InitAsDefaultInstance();
  MsgQueryMsg::default_instance_->InitAsDefaultInstance();
  MsgQueryMsgResult::default_instance_->InitAsDefaultInstance();
  MsgAddMsg::default_instance_->InitAsDefaultInstance();
  MsgAddMsgResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_netmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_netmsg_2eproto {
  StaticDescriptorInitializer_netmsg_2eproto() {
    protobuf_AddDesc_netmsg_2eproto();
  }
} static_descriptor_initializer_netmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* NetMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetMsgType_descriptor_;
}
bool NetMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPack::kHeadFieldNumber;
const int MsgPack::kMsgqueryFieldNumber;
const int MsgPack::kMsgaddFieldNumber;
const int MsgPack::kMsgquerymsgresultFieldNumber;
const int MsgPack::kMsgaddmsgresultFieldNumber;
#endif  // !_MSC_VER

MsgPack::MsgPack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.MsgPack)
}

void MsgPack::InitAsDefaultInstance() {
  head_ = const_cast< ::netmsg::MsgHead*>(&::netmsg::MsgHead::default_instance());
  msgquery_ = const_cast< ::netmsg::MsgQueryMsg*>(&::netmsg::MsgQueryMsg::default_instance());
  msgadd_ = const_cast< ::netmsg::MsgAddMsg*>(&::netmsg::MsgAddMsg::default_instance());
  msgquerymsgresult_ = const_cast< ::netmsg::MsgQueryMsgResult*>(&::netmsg::MsgQueryMsgResult::default_instance());
  msgaddmsgresult_ = const_cast< ::netmsg::MsgAddMsgResult*>(&::netmsg::MsgAddMsgResult::default_instance());
}

MsgPack::MsgPack(const MsgPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.MsgPack)
}

void MsgPack::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  msgquery_ = NULL;
  msgadd_ = NULL;
  msgquerymsgresult_ = NULL;
  msgaddmsgresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPack::~MsgPack() {
  // @@protoc_insertion_point(destructor:netmsg.MsgPack)
  SharedDtor();
}

void MsgPack::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete msgquery_;
    delete msgadd_;
    delete msgquerymsgresult_;
    delete msgaddmsgresult_;
  }
}

void MsgPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPack_descriptor_;
}

const MsgPack& MsgPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

MsgPack* MsgPack::default_instance_ = NULL;

MsgPack* MsgPack::New() const {
  return new MsgPack;
}

void MsgPack::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_head()) {
      if (head_ != NULL) head_->::netmsg::MsgHead::Clear();
    }
    if (has_msgquery()) {
      if (msgquery_ != NULL) msgquery_->::netmsg::MsgQueryMsg::Clear();
    }
    if (has_msgadd()) {
      if (msgadd_ != NULL) msgadd_->::netmsg::MsgAddMsg::Clear();
    }
    if (has_msgquerymsgresult()) {
      if (msgquerymsgresult_ != NULL) msgquerymsgresult_->::netmsg::MsgQueryMsgResult::Clear();
    }
    if (has_msgaddmsgresult()) {
      if (msgaddmsgresult_ != NULL) msgaddmsgresult_->::netmsg::MsgAddMsgResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.MsgPack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .netmsg.MsgHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgquery;
        break;
      }

      // optional .netmsg.MsgQueryMsg msgquery = 2;
      case 2: {
        if (tag == 18) {
         parse_msgquery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgquery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgadd;
        break;
      }

      // optional .netmsg.MsgAddMsg msgadd = 3;
      case 3: {
        if (tag == 26) {
         parse_msgadd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgadd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgquerymsgresult;
        break;
      }

      // optional .netmsg.MsgQueryMsgResult msgquerymsgresult = 4;
      case 4: {
        if (tag == 34) {
         parse_msgquerymsgresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgquerymsgresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msgaddmsgresult;
        break;
      }

      // optional .netmsg.MsgAddMsgResult msgaddmsgresult = 5;
      case 5: {
        if (tag == 42) {
         parse_msgaddmsgresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgaddmsgresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.MsgPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.MsgPack)
  return false;
#undef DO_
}

void MsgPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.MsgPack)
  // required .netmsg.MsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional .netmsg.MsgQueryMsg msgquery = 2;
  if (has_msgquery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msgquery(), output);
  }

  // optional .netmsg.MsgAddMsg msgadd = 3;
  if (has_msgadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msgadd(), output);
  }

  // optional .netmsg.MsgQueryMsgResult msgquerymsgresult = 4;
  if (has_msgquerymsgresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msgquerymsgresult(), output);
  }

  // optional .netmsg.MsgAddMsgResult msgaddmsgresult = 5;
  if (has_msgaddmsgresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msgaddmsgresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.MsgPack)
}

::google::protobuf::uint8* MsgPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.MsgPack)
  // required .netmsg.MsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional .netmsg.MsgQueryMsg msgquery = 2;
  if (has_msgquery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msgquery(), target);
  }

  // optional .netmsg.MsgAddMsg msgadd = 3;
  if (has_msgadd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msgadd(), target);
  }

  // optional .netmsg.MsgQueryMsgResult msgquerymsgresult = 4;
  if (has_msgquerymsgresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msgquerymsgresult(), target);
  }

  // optional .netmsg.MsgAddMsgResult msgaddmsgresult = 5;
  if (has_msgaddmsgresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msgaddmsgresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.MsgPack)
  return target;
}

int MsgPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .netmsg.MsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional .netmsg.MsgQueryMsg msgquery = 2;
    if (has_msgquery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgquery());
    }

    // optional .netmsg.MsgAddMsg msgadd = 3;
    if (has_msgadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgadd());
    }

    // optional .netmsg.MsgQueryMsgResult msgquerymsgresult = 4;
    if (has_msgquerymsgresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgquerymsgresult());
    }

    // optional .netmsg.MsgAddMsgResult msgaddmsgresult = 5;
    if (has_msgaddmsgresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgaddmsgresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPack::MergeFrom(const MsgPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::netmsg::MsgHead::MergeFrom(from.head());
    }
    if (from.has_msgquery()) {
      mutable_msgquery()->::netmsg::MsgQueryMsg::MergeFrom(from.msgquery());
    }
    if (from.has_msgadd()) {
      mutable_msgadd()->::netmsg::MsgAddMsg::MergeFrom(from.msgadd());
    }
    if (from.has_msgquerymsgresult()) {
      mutable_msgquerymsgresult()->::netmsg::MsgQueryMsgResult::MergeFrom(from.msgquerymsgresult());
    }
    if (from.has_msgaddmsgresult()) {
      mutable_msgaddmsgresult()->::netmsg::MsgAddMsgResult::MergeFrom(from.msgaddmsgresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPack::CopyFrom(const MsgPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_msgquery()) {
    if (!this->msgquery().IsInitialized()) return false;
  }
  if (has_msgadd()) {
    if (!this->msgadd().IsInitialized()) return false;
  }
  if (has_msgquerymsgresult()) {
    if (!this->msgquerymsgresult().IsInitialized()) return false;
  }
  if (has_msgaddmsgresult()) {
    if (!this->msgaddmsgresult().IsInitialized()) return false;
  }
  return true;
}

void MsgPack::Swap(MsgPack* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(msgquery_, other->msgquery_);
    std::swap(msgadd_, other->msgadd_);
    std::swap(msgquerymsgresult_, other->msgquerymsgresult_);
    std::swap(msgaddmsgresult_, other->msgaddmsgresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPack_descriptor_;
  metadata.reflection = MsgPack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHead::kGlobalPackNumberFieldNumber;
const int MsgHead::kTotalPackFieldNumber;
const int MsgHead::kPackIndexFieldNumber;
const int MsgHead::kPacktypeFieldNumber;
#endif  // !_MSC_VER

MsgHead::MsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.MsgHead)
}

void MsgHead::InitAsDefaultInstance() {
}

MsgHead::MsgHead(const MsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.MsgHead)
}

void MsgHead::SharedCtor() {
  _cached_size_ = 0;
  globalpacknumber_ = 1u;
  totalpack_ = 1;
  packindex_ = 1;
  packtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHead::~MsgHead() {
  // @@protoc_insertion_point(destructor:netmsg.MsgHead)
  SharedDtor();
}

void MsgHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHead_descriptor_;
}

const MsgHead& MsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

MsgHead* MsgHead::default_instance_ = NULL;

MsgHead* MsgHead::New() const {
  return new MsgHead;
}

void MsgHead::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    globalpacknumber_ = 1u;
    totalpack_ = 1;
    packindex_ = 1;
    packtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.MsgHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 globalPackNumber = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &globalpacknumber_)));
          set_has_globalpacknumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalPack;
        break;
      }

      // required int32 totalPack = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_totalPack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalpack_)));
          set_has_totalpack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_packIndex;
        break;
      }

      // required int32 packIndex = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_packIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packindex_)));
          set_has_packindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_packtype;
        break;
      }

      // required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
      case 4: {
        if (tag == 32) {
         parse_packtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::netmsg::NetMsgType_IsValid(value)) {
            set_packtype(static_cast< ::netmsg::NetMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.MsgHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.MsgHead)
  return false;
#undef DO_
}

void MsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.MsgHead)
  // required uint32 globalPackNumber = 1 [default = 1];
  if (has_globalpacknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->globalpacknumber(), output);
  }

  // required int32 totalPack = 2 [default = 1];
  if (has_totalpack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalpack(), output);
  }

  // required int32 packIndex = 3 [default = 1];
  if (has_packindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->packindex(), output);
  }

  // required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
  if (has_packtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->packtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.MsgHead)
}

::google::protobuf::uint8* MsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.MsgHead)
  // required uint32 globalPackNumber = 1 [default = 1];
  if (has_globalpacknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->globalpacknumber(), target);
  }

  // required int32 totalPack = 2 [default = 1];
  if (has_totalpack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalpack(), target);
  }

  // required int32 packIndex = 3 [default = 1];
  if (has_packindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->packindex(), target);
  }

  // required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
  if (has_packtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->packtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.MsgHead)
  return target;
}

int MsgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 globalPackNumber = 1 [default = 1];
    if (has_globalpacknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->globalpacknumber());
    }

    // required int32 totalPack = 2 [default = 1];
    if (has_totalpack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalpack());
    }

    // required int32 packIndex = 3 [default = 1];
    if (has_packindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packindex());
    }

    // required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
    if (has_packtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHead::MergeFrom(const MsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globalpacknumber()) {
      set_globalpacknumber(from.globalpacknumber());
    }
    if (from.has_totalpack()) {
      set_totalpack(from.totalpack());
    }
    if (from.has_packindex()) {
      set_packindex(from.packindex());
    }
    if (from.has_packtype()) {
      set_packtype(from.packtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHead::CopyFrom(const MsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MsgHead::Swap(MsgHead* other) {
  if (other != this) {
    std::swap(globalpacknumber_, other->globalpacknumber_);
    std::swap(totalpack_, other->totalpack_);
    std::swap(packindex_, other->packindex_);
    std::swap(packtype_, other->packtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHead_descriptor_;
  metadata.reflection = MsgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

MsgQueryMsg::MsgQueryMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.MsgQueryMsg)
}

void MsgQueryMsg::InitAsDefaultInstance() {
}

MsgQueryMsg::MsgQueryMsg(const MsgQueryMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.MsgQueryMsg)
}

void MsgQueryMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryMsg::~MsgQueryMsg() {
  // @@protoc_insertion_point(destructor:netmsg.MsgQueryMsg)
  SharedDtor();
}

void MsgQueryMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void MsgQueryMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryMsg_descriptor_;
}

const MsgQueryMsg& MsgQueryMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

MsgQueryMsg* MsgQueryMsg::default_instance_ = NULL;

MsgQueryMsg* MsgQueryMsg::New() const {
  return new MsgQueryMsg;
}

void MsgQueryMsg::Clear() {
  if (has_msg()) {
    if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      msg_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.MsgQueryMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.MsgQueryMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.MsgQueryMsg)
  return false;
#undef DO_
}

void MsgQueryMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.MsgQueryMsg)
  // required string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.MsgQueryMsg)
}

::google::protobuf::uint8* MsgQueryMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.MsgQueryMsg)
  // required string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.MsgQueryMsg)
  return target;
}

int MsgQueryMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryMsg::MergeFrom(const MsgQueryMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryMsg::CopyFrom(const MsgQueryMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryMsg::Swap(MsgQueryMsg* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryMsg_descriptor_;
  metadata.reflection = MsgQueryMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryMsgResult::kResultDataFieldNumber;
const int MsgQueryMsgResult::kResultErrorFieldNumber;
#endif  // !_MSC_VER

MsgQueryMsgResult::MsgQueryMsgResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.MsgQueryMsgResult)
}

void MsgQueryMsgResult::InitAsDefaultInstance() {
}

MsgQueryMsgResult::MsgQueryMsgResult(const MsgQueryMsgResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.MsgQueryMsgResult)
}

void MsgQueryMsgResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resultdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryMsgResult::~MsgQueryMsgResult() {
  // @@protoc_insertion_point(destructor:netmsg.MsgQueryMsgResult)
  SharedDtor();
}

void MsgQueryMsgResult::SharedDtor() {
  if (resultdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdata_;
  }
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (this != default_instance_) {
  }
}

void MsgQueryMsgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryMsgResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryMsgResult_descriptor_;
}

const MsgQueryMsgResult& MsgQueryMsgResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

MsgQueryMsgResult* MsgQueryMsgResult::default_instance_ = NULL;

MsgQueryMsgResult* MsgQueryMsgResult::New() const {
  return new MsgQueryMsgResult;
}

void MsgQueryMsgResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_resultdata()) {
      if (resultdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resultdata_->clear();
      }
    }
    if (has_resulterror()) {
      if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resulterror_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryMsgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.MsgQueryMsgResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resultData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resultdata().data(), this->resultdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resultdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resultError;
        break;
      }

      // required string resultError = 2;
      case 2: {
        if (tag == 18) {
         parse_resultError:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resulterror()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resulterror().data(), this->resulterror().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resulterror");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.MsgQueryMsgResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.MsgQueryMsgResult)
  return false;
#undef DO_
}

void MsgQueryMsgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.MsgQueryMsgResult)
  // required string resultData = 1;
  if (has_resultdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdata().data(), this->resultdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resultdata(), output);
  }

  // required string resultError = 2;
  if (has_resulterror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulterror().data(), this->resulterror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulterror");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resulterror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.MsgQueryMsgResult)
}

::google::protobuf::uint8* MsgQueryMsgResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.MsgQueryMsgResult)
  // required string resultData = 1;
  if (has_resultdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resultdata().data(), this->resultdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resultdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resultdata(), target);
  }

  // required string resultError = 2;
  if (has_resulterror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulterror().data(), this->resulterror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulterror");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resulterror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.MsgQueryMsgResult)
  return target;
}

int MsgQueryMsgResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resultData = 1;
    if (has_resultdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resultdata());
    }

    // required string resultError = 2;
    if (has_resulterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resulterror());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryMsgResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryMsgResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryMsgResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryMsgResult::MergeFrom(const MsgQueryMsgResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultdata()) {
      set_resultdata(from.resultdata());
    }
    if (from.has_resulterror()) {
      set_resulterror(from.resulterror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryMsgResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryMsgResult::CopyFrom(const MsgQueryMsgResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryMsgResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgQueryMsgResult::Swap(MsgQueryMsgResult* other) {
  if (other != this) {
    std::swap(resultdata_, other->resultdata_);
    std::swap(resulterror_, other->resulterror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryMsgResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryMsgResult_descriptor_;
  metadata.reflection = MsgQueryMsgResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAddMsg::kTableNameFieldNumber;
const int MsgAddMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

MsgAddMsg::MsgAddMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.MsgAddMsg)
}

void MsgAddMsg::InitAsDefaultInstance() {
}

MsgAddMsg::MsgAddMsg(const MsgAddMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.MsgAddMsg)
}

void MsgAddMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAddMsg::~MsgAddMsg() {
  // @@protoc_insertion_point(destructor:netmsg.MsgAddMsg)
  SharedDtor();
}

void MsgAddMsg::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void MsgAddMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAddMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAddMsg_descriptor_;
}

const MsgAddMsg& MsgAddMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

MsgAddMsg* MsgAddMsg::default_instance_ = NULL;

MsgAddMsg* MsgAddMsg::New() const {
  return new MsgAddMsg;
}

void MsgAddMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablename_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAddMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.MsgAddMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TableName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // required string Msg = 2;
      case 2: {
        if (tag == 18) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.MsgAddMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.MsgAddMsg)
  return false;
#undef DO_
}

void MsgAddMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.MsgAddMsg)
  // required string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablename(), output);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.MsgAddMsg)
}

::google::protobuf::uint8* MsgAddMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.MsgAddMsg)
  // required string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablename(), target);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.MsgAddMsg)
  return target;
}

int MsgAddMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TableName = 1;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // required string Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAddMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAddMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAddMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAddMsg::MergeFrom(const MsgAddMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAddMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAddMsg::CopyFrom(const MsgAddMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAddMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgAddMsg::Swap(MsgAddMsg* other) {
  if (other != this) {
    std::swap(tablename_, other->tablename_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAddMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAddMsg_descriptor_;
  metadata.reflection = MsgAddMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAddMsgResult::kResultErrorFieldNumber;
#endif  // !_MSC_VER

MsgAddMsgResult::MsgAddMsgResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.MsgAddMsgResult)
}

void MsgAddMsgResult::InitAsDefaultInstance() {
}

MsgAddMsgResult::MsgAddMsgResult(const MsgAddMsgResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.MsgAddMsgResult)
}

void MsgAddMsgResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAddMsgResult::~MsgAddMsgResult() {
  // @@protoc_insertion_point(destructor:netmsg.MsgAddMsgResult)
  SharedDtor();
}

void MsgAddMsgResult::SharedDtor() {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (this != default_instance_) {
  }
}

void MsgAddMsgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAddMsgResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAddMsgResult_descriptor_;
}

const MsgAddMsgResult& MsgAddMsgResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmsg_2eproto();
  return *default_instance_;
}

MsgAddMsgResult* MsgAddMsgResult::default_instance_ = NULL;

MsgAddMsgResult* MsgAddMsgResult::New() const {
  return new MsgAddMsgResult;
}

void MsgAddMsgResult::Clear() {
  if (has_resulterror()) {
    if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      resulterror_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAddMsgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.MsgAddMsgResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resultError = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resulterror()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resulterror().data(), this->resulterror().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resulterror");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.MsgAddMsgResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.MsgAddMsgResult)
  return false;
#undef DO_
}

void MsgAddMsgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.MsgAddMsgResult)
  // required string resultError = 1;
  if (has_resulterror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulterror().data(), this->resulterror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulterror");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resulterror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.MsgAddMsgResult)
}

::google::protobuf::uint8* MsgAddMsgResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.MsgAddMsgResult)
  // required string resultError = 1;
  if (has_resulterror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulterror().data(), this->resulterror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulterror");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resulterror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.MsgAddMsgResult)
  return target;
}

int MsgAddMsgResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resultError = 1;
    if (has_resulterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resulterror());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAddMsgResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAddMsgResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAddMsgResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAddMsgResult::MergeFrom(const MsgAddMsgResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resulterror()) {
      set_resulterror(from.resulterror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAddMsgResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAddMsgResult::CopyFrom(const MsgAddMsgResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAddMsgResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgAddMsgResult::Swap(MsgAddMsgResult* other) {
  if (other != this) {
    std::swap(resulterror_, other->resulterror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAddMsgResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAddMsgResult_descriptor_;
  metadata.reflection = MsgAddMsgResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace netmsg

// @@protoc_insertion_point(global_scope)
