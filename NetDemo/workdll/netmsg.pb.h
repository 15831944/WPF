// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmsg.proto

#ifndef PROTOBUF_netmsg_2eproto__INCLUDED
#define PROTOBUF_netmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace netmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_netmsg_2eproto();
void protobuf_AssignDesc_netmsg_2eproto();
void protobuf_ShutdownFile_netmsg_2eproto();

class MsgPack;
class MsgHead;
class MsgQueryMsg;
class MsgQueryMsgResult;
class MsgAddMsg;
class MsgAddMsgResult;

enum NetMsgType {
  NetMsgType_Unknown = 0,
  NetMsgType_DatabaseAddAsk = 1,
  NetMsgType_DatabaseAddSuccess = 2,
  NetMsgType_DatabaseAddError = 3,
  NetMsgType_DatabaseDeleteAsk = 4,
  NetMsgType_DatabaseDeleteSuccess = 5,
  NetMsgType_DatabaseDeleteError = 6,
  NetMsgType_DatabaseQueryAsk = 7,
  NetMsgType_DatabaseQuerySuccess = 8,
  NetMsgType_DatabaseQueryError = 9
};
bool NetMsgType_IsValid(int value);
const NetMsgType NetMsgType_MIN = NetMsgType_Unknown;
const NetMsgType NetMsgType_MAX = NetMsgType_DatabaseQueryError;
const int NetMsgType_ARRAYSIZE = NetMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetMsgType_descriptor();
inline const ::std::string& NetMsgType_Name(NetMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetMsgType_descriptor(), value);
}
inline bool NetMsgType_Parse(
    const ::std::string& name, NetMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetMsgType>(
    NetMsgType_descriptor(), name, value);
}
// ===================================================================

class MsgPack : public ::google::protobuf::Message {
 public:
  MsgPack();
  virtual ~MsgPack();

  MsgPack(const MsgPack& from);

  inline MsgPack& operator=(const MsgPack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPack& default_instance();

  void Swap(MsgPack* other);

  // implements Message ----------------------------------------------

  MsgPack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPack& from);
  void MergeFrom(const MsgPack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .netmsg.MsgHead head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::netmsg::MsgHead& head() const;
  inline ::netmsg::MsgHead* mutable_head();
  inline ::netmsg::MsgHead* release_head();
  inline void set_allocated_head(::netmsg::MsgHead* head);

  // optional .netmsg.MsgQueryMsg msgquery = 2;
  inline bool has_msgquery() const;
  inline void clear_msgquery();
  static const int kMsgqueryFieldNumber = 2;
  inline const ::netmsg::MsgQueryMsg& msgquery() const;
  inline ::netmsg::MsgQueryMsg* mutable_msgquery();
  inline ::netmsg::MsgQueryMsg* release_msgquery();
  inline void set_allocated_msgquery(::netmsg::MsgQueryMsg* msgquery);

  // optional .netmsg.MsgAddMsg msgadd = 3;
  inline bool has_msgadd() const;
  inline void clear_msgadd();
  static const int kMsgaddFieldNumber = 3;
  inline const ::netmsg::MsgAddMsg& msgadd() const;
  inline ::netmsg::MsgAddMsg* mutable_msgadd();
  inline ::netmsg::MsgAddMsg* release_msgadd();
  inline void set_allocated_msgadd(::netmsg::MsgAddMsg* msgadd);

  // optional .netmsg.MsgQueryMsgResult msgquerymsgresult = 4;
  inline bool has_msgquerymsgresult() const;
  inline void clear_msgquerymsgresult();
  static const int kMsgquerymsgresultFieldNumber = 4;
  inline const ::netmsg::MsgQueryMsgResult& msgquerymsgresult() const;
  inline ::netmsg::MsgQueryMsgResult* mutable_msgquerymsgresult();
  inline ::netmsg::MsgQueryMsgResult* release_msgquerymsgresult();
  inline void set_allocated_msgquerymsgresult(::netmsg::MsgQueryMsgResult* msgquerymsgresult);

  // optional .netmsg.MsgAddMsgResult msgaddmsgresult = 5;
  inline bool has_msgaddmsgresult() const;
  inline void clear_msgaddmsgresult();
  static const int kMsgaddmsgresultFieldNumber = 5;
  inline const ::netmsg::MsgAddMsgResult& msgaddmsgresult() const;
  inline ::netmsg::MsgAddMsgResult* mutable_msgaddmsgresult();
  inline ::netmsg::MsgAddMsgResult* release_msgaddmsgresult();
  inline void set_allocated_msgaddmsgresult(::netmsg::MsgAddMsgResult* msgaddmsgresult);

  // @@protoc_insertion_point(class_scope:netmsg.MsgPack)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_msgquery();
  inline void clear_has_msgquery();
  inline void set_has_msgadd();
  inline void clear_has_msgadd();
  inline void set_has_msgquerymsgresult();
  inline void clear_has_msgquerymsgresult();
  inline void set_has_msgaddmsgresult();
  inline void clear_has_msgaddmsgresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::netmsg::MsgHead* head_;
  ::netmsg::MsgQueryMsg* msgquery_;
  ::netmsg::MsgAddMsg* msgadd_;
  ::netmsg::MsgQueryMsgResult* msgquerymsgresult_;
  ::netmsg::MsgAddMsgResult* msgaddmsgresult_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static MsgPack* default_instance_;
};
// -------------------------------------------------------------------

class MsgHead : public ::google::protobuf::Message {
 public:
  MsgHead();
  virtual ~MsgHead();

  MsgHead(const MsgHead& from);

  inline MsgHead& operator=(const MsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHead& default_instance();

  void Swap(MsgHead* other);

  // implements Message ----------------------------------------------

  MsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHead& from);
  void MergeFrom(const MsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 globalPackNumber = 1 [default = 1];
  inline bool has_globalpacknumber() const;
  inline void clear_globalpacknumber();
  static const int kGlobalPackNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 globalpacknumber() const;
  inline void set_globalpacknumber(::google::protobuf::uint32 value);

  // required int32 totalPack = 2 [default = 1];
  inline bool has_totalpack() const;
  inline void clear_totalpack();
  static const int kTotalPackFieldNumber = 2;
  inline ::google::protobuf::int32 totalpack() const;
  inline void set_totalpack(::google::protobuf::int32 value);

  // required int32 packIndex = 3 [default = 1];
  inline bool has_packindex() const;
  inline void clear_packindex();
  static const int kPackIndexFieldNumber = 3;
  inline ::google::protobuf::int32 packindex() const;
  inline void set_packindex(::google::protobuf::int32 value);

  // required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
  inline bool has_packtype() const;
  inline void clear_packtype();
  static const int kPacktypeFieldNumber = 4;
  inline ::netmsg::NetMsgType packtype() const;
  inline void set_packtype(::netmsg::NetMsgType value);

  // @@protoc_insertion_point(class_scope:netmsg.MsgHead)
 private:
  inline void set_has_globalpacknumber();
  inline void clear_has_globalpacknumber();
  inline void set_has_totalpack();
  inline void clear_has_totalpack();
  inline void set_has_packindex();
  inline void clear_has_packindex();
  inline void set_has_packtype();
  inline void clear_has_packtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 globalpacknumber_;
  ::google::protobuf::int32 totalpack_;
  ::google::protobuf::int32 packindex_;
  int packtype_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static MsgHead* default_instance_;
};
// -------------------------------------------------------------------

class MsgQueryMsg : public ::google::protobuf::Message {
 public:
  MsgQueryMsg();
  virtual ~MsgQueryMsg();

  MsgQueryMsg(const MsgQueryMsg& from);

  inline MsgQueryMsg& operator=(const MsgQueryMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgQueryMsg& default_instance();

  void Swap(MsgQueryMsg* other);

  // implements Message ----------------------------------------------

  MsgQueryMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgQueryMsg& from);
  void MergeFrom(const MsgQueryMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:netmsg.MsgQueryMsg)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static MsgQueryMsg* default_instance_;
};
// -------------------------------------------------------------------

class MsgQueryMsgResult : public ::google::protobuf::Message {
 public:
  MsgQueryMsgResult();
  virtual ~MsgQueryMsgResult();

  MsgQueryMsgResult(const MsgQueryMsgResult& from);

  inline MsgQueryMsgResult& operator=(const MsgQueryMsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgQueryMsgResult& default_instance();

  void Swap(MsgQueryMsgResult* other);

  // implements Message ----------------------------------------------

  MsgQueryMsgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgQueryMsgResult& from);
  void MergeFrom(const MsgQueryMsgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string resultData = 1;
  inline bool has_resultdata() const;
  inline void clear_resultdata();
  static const int kResultDataFieldNumber = 1;
  inline const ::std::string& resultdata() const;
  inline void set_resultdata(const ::std::string& value);
  inline void set_resultdata(const char* value);
  inline void set_resultdata(const char* value, size_t size);
  inline ::std::string* mutable_resultdata();
  inline ::std::string* release_resultdata();
  inline void set_allocated_resultdata(::std::string* resultdata);

  // required string resultError = 2;
  inline bool has_resulterror() const;
  inline void clear_resulterror();
  static const int kResultErrorFieldNumber = 2;
  inline const ::std::string& resulterror() const;
  inline void set_resulterror(const ::std::string& value);
  inline void set_resulterror(const char* value);
  inline void set_resulterror(const char* value, size_t size);
  inline ::std::string* mutable_resulterror();
  inline ::std::string* release_resulterror();
  inline void set_allocated_resulterror(::std::string* resulterror);

  // @@protoc_insertion_point(class_scope:netmsg.MsgQueryMsgResult)
 private:
  inline void set_has_resultdata();
  inline void clear_has_resultdata();
  inline void set_has_resulterror();
  inline void clear_has_resulterror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* resultdata_;
  ::std::string* resulterror_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static MsgQueryMsgResult* default_instance_;
};
// -------------------------------------------------------------------

class MsgAddMsg : public ::google::protobuf::Message {
 public:
  MsgAddMsg();
  virtual ~MsgAddMsg();

  MsgAddMsg(const MsgAddMsg& from);

  inline MsgAddMsg& operator=(const MsgAddMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAddMsg& default_instance();

  void Swap(MsgAddMsg* other);

  // implements Message ----------------------------------------------

  MsgAddMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAddMsg& from);
  void MergeFrom(const MsgAddMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TableName = 1;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // required string Msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:netmsg.MsgAddMsg)
 private:
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tablename_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static MsgAddMsg* default_instance_;
};
// -------------------------------------------------------------------

class MsgAddMsgResult : public ::google::protobuf::Message {
 public:
  MsgAddMsgResult();
  virtual ~MsgAddMsgResult();

  MsgAddMsgResult(const MsgAddMsgResult& from);

  inline MsgAddMsgResult& operator=(const MsgAddMsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAddMsgResult& default_instance();

  void Swap(MsgAddMsgResult* other);

  // implements Message ----------------------------------------------

  MsgAddMsgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAddMsgResult& from);
  void MergeFrom(const MsgAddMsgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string resultError = 1;
  inline bool has_resulterror() const;
  inline void clear_resulterror();
  static const int kResultErrorFieldNumber = 1;
  inline const ::std::string& resulterror() const;
  inline void set_resulterror(const ::std::string& value);
  inline void set_resulterror(const char* value);
  inline void set_resulterror(const char* value, size_t size);
  inline ::std::string* mutable_resulterror();
  inline ::std::string* release_resulterror();
  inline void set_allocated_resulterror(::std::string* resulterror);

  // @@protoc_insertion_point(class_scope:netmsg.MsgAddMsgResult)
 private:
  inline void set_has_resulterror();
  inline void clear_has_resulterror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* resulterror_;
  friend void  protobuf_AddDesc_netmsg_2eproto();
  friend void protobuf_AssignDesc_netmsg_2eproto();
  friend void protobuf_ShutdownFile_netmsg_2eproto();

  void InitAsDefaultInstance();
  static MsgAddMsgResult* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgPack

// required .netmsg.MsgHead head = 1;
inline bool MsgPack::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPack::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPack::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPack::clear_head() {
  if (head_ != NULL) head_->::netmsg::MsgHead::Clear();
  clear_has_head();
}
inline const ::netmsg::MsgHead& MsgPack::head() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::netmsg::MsgHead* MsgPack::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::netmsg::MsgHead;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.head)
  return head_;
}
inline ::netmsg::MsgHead* MsgPack::release_head() {
  clear_has_head();
  ::netmsg::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_head(::netmsg::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.head)
}

// optional .netmsg.MsgQueryMsg msgquery = 2;
inline bool MsgPack::has_msgquery() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPack::set_has_msgquery() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPack::clear_has_msgquery() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPack::clear_msgquery() {
  if (msgquery_ != NULL) msgquery_->::netmsg::MsgQueryMsg::Clear();
  clear_has_msgquery();
}
inline const ::netmsg::MsgQueryMsg& MsgPack::msgquery() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.msgquery)
  return msgquery_ != NULL ? *msgquery_ : *default_instance_->msgquery_;
}
inline ::netmsg::MsgQueryMsg* MsgPack::mutable_msgquery() {
  set_has_msgquery();
  if (msgquery_ == NULL) msgquery_ = new ::netmsg::MsgQueryMsg;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.msgquery)
  return msgquery_;
}
inline ::netmsg::MsgQueryMsg* MsgPack::release_msgquery() {
  clear_has_msgquery();
  ::netmsg::MsgQueryMsg* temp = msgquery_;
  msgquery_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_msgquery(::netmsg::MsgQueryMsg* msgquery) {
  delete msgquery_;
  msgquery_ = msgquery;
  if (msgquery) {
    set_has_msgquery();
  } else {
    clear_has_msgquery();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.msgquery)
}

// optional .netmsg.MsgAddMsg msgadd = 3;
inline bool MsgPack::has_msgadd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgPack::set_has_msgadd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgPack::clear_has_msgadd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgPack::clear_msgadd() {
  if (msgadd_ != NULL) msgadd_->::netmsg::MsgAddMsg::Clear();
  clear_has_msgadd();
}
inline const ::netmsg::MsgAddMsg& MsgPack::msgadd() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.msgadd)
  return msgadd_ != NULL ? *msgadd_ : *default_instance_->msgadd_;
}
inline ::netmsg::MsgAddMsg* MsgPack::mutable_msgadd() {
  set_has_msgadd();
  if (msgadd_ == NULL) msgadd_ = new ::netmsg::MsgAddMsg;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.msgadd)
  return msgadd_;
}
inline ::netmsg::MsgAddMsg* MsgPack::release_msgadd() {
  clear_has_msgadd();
  ::netmsg::MsgAddMsg* temp = msgadd_;
  msgadd_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_msgadd(::netmsg::MsgAddMsg* msgadd) {
  delete msgadd_;
  msgadd_ = msgadd;
  if (msgadd) {
    set_has_msgadd();
  } else {
    clear_has_msgadd();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.msgadd)
}

// optional .netmsg.MsgQueryMsgResult msgquerymsgresult = 4;
inline bool MsgPack::has_msgquerymsgresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgPack::set_has_msgquerymsgresult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgPack::clear_has_msgquerymsgresult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgPack::clear_msgquerymsgresult() {
  if (msgquerymsgresult_ != NULL) msgquerymsgresult_->::netmsg::MsgQueryMsgResult::Clear();
  clear_has_msgquerymsgresult();
}
inline const ::netmsg::MsgQueryMsgResult& MsgPack::msgquerymsgresult() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.msgquerymsgresult)
  return msgquerymsgresult_ != NULL ? *msgquerymsgresult_ : *default_instance_->msgquerymsgresult_;
}
inline ::netmsg::MsgQueryMsgResult* MsgPack::mutable_msgquerymsgresult() {
  set_has_msgquerymsgresult();
  if (msgquerymsgresult_ == NULL) msgquerymsgresult_ = new ::netmsg::MsgQueryMsgResult;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.msgquerymsgresult)
  return msgquerymsgresult_;
}
inline ::netmsg::MsgQueryMsgResult* MsgPack::release_msgquerymsgresult() {
  clear_has_msgquerymsgresult();
  ::netmsg::MsgQueryMsgResult* temp = msgquerymsgresult_;
  msgquerymsgresult_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_msgquerymsgresult(::netmsg::MsgQueryMsgResult* msgquerymsgresult) {
  delete msgquerymsgresult_;
  msgquerymsgresult_ = msgquerymsgresult;
  if (msgquerymsgresult) {
    set_has_msgquerymsgresult();
  } else {
    clear_has_msgquerymsgresult();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.msgquerymsgresult)
}

// optional .netmsg.MsgAddMsgResult msgaddmsgresult = 5;
inline bool MsgPack::has_msgaddmsgresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgPack::set_has_msgaddmsgresult() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgPack::clear_has_msgaddmsgresult() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgPack::clear_msgaddmsgresult() {
  if (msgaddmsgresult_ != NULL) msgaddmsgresult_->::netmsg::MsgAddMsgResult::Clear();
  clear_has_msgaddmsgresult();
}
inline const ::netmsg::MsgAddMsgResult& MsgPack::msgaddmsgresult() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgPack.msgaddmsgresult)
  return msgaddmsgresult_ != NULL ? *msgaddmsgresult_ : *default_instance_->msgaddmsgresult_;
}
inline ::netmsg::MsgAddMsgResult* MsgPack::mutable_msgaddmsgresult() {
  set_has_msgaddmsgresult();
  if (msgaddmsgresult_ == NULL) msgaddmsgresult_ = new ::netmsg::MsgAddMsgResult;
  // @@protoc_insertion_point(field_mutable:netmsg.MsgPack.msgaddmsgresult)
  return msgaddmsgresult_;
}
inline ::netmsg::MsgAddMsgResult* MsgPack::release_msgaddmsgresult() {
  clear_has_msgaddmsgresult();
  ::netmsg::MsgAddMsgResult* temp = msgaddmsgresult_;
  msgaddmsgresult_ = NULL;
  return temp;
}
inline void MsgPack::set_allocated_msgaddmsgresult(::netmsg::MsgAddMsgResult* msgaddmsgresult) {
  delete msgaddmsgresult_;
  msgaddmsgresult_ = msgaddmsgresult;
  if (msgaddmsgresult) {
    set_has_msgaddmsgresult();
  } else {
    clear_has_msgaddmsgresult();
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgPack.msgaddmsgresult)
}

// -------------------------------------------------------------------

// MsgHead

// required uint32 globalPackNumber = 1 [default = 1];
inline bool MsgHead::has_globalpacknumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHead::set_has_globalpacknumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHead::clear_has_globalpacknumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHead::clear_globalpacknumber() {
  globalpacknumber_ = 1u;
  clear_has_globalpacknumber();
}
inline ::google::protobuf::uint32 MsgHead::globalpacknumber() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgHead.globalPackNumber)
  return globalpacknumber_;
}
inline void MsgHead::set_globalpacknumber(::google::protobuf::uint32 value) {
  set_has_globalpacknumber();
  globalpacknumber_ = value;
  // @@protoc_insertion_point(field_set:netmsg.MsgHead.globalPackNumber)
}

// required int32 totalPack = 2 [default = 1];
inline bool MsgHead::has_totalpack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHead::set_has_totalpack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHead::clear_has_totalpack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHead::clear_totalpack() {
  totalpack_ = 1;
  clear_has_totalpack();
}
inline ::google::protobuf::int32 MsgHead::totalpack() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgHead.totalPack)
  return totalpack_;
}
inline void MsgHead::set_totalpack(::google::protobuf::int32 value) {
  set_has_totalpack();
  totalpack_ = value;
  // @@protoc_insertion_point(field_set:netmsg.MsgHead.totalPack)
}

// required int32 packIndex = 3 [default = 1];
inline bool MsgHead::has_packindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgHead::set_has_packindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgHead::clear_has_packindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgHead::clear_packindex() {
  packindex_ = 1;
  clear_has_packindex();
}
inline ::google::protobuf::int32 MsgHead::packindex() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgHead.packIndex)
  return packindex_;
}
inline void MsgHead::set_packindex(::google::protobuf::int32 value) {
  set_has_packindex();
  packindex_ = value;
  // @@protoc_insertion_point(field_set:netmsg.MsgHead.packIndex)
}

// required .netmsg.NetMsgType packtype = 4 [default = NetMsgType_Unknown];
inline bool MsgHead::has_packtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgHead::set_has_packtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgHead::clear_has_packtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgHead::clear_packtype() {
  packtype_ = 0;
  clear_has_packtype();
}
inline ::netmsg::NetMsgType MsgHead::packtype() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgHead.packtype)
  return static_cast< ::netmsg::NetMsgType >(packtype_);
}
inline void MsgHead::set_packtype(::netmsg::NetMsgType value) {
  assert(::netmsg::NetMsgType_IsValid(value));
  set_has_packtype();
  packtype_ = value;
  // @@protoc_insertion_point(field_set:netmsg.MsgHead.packtype)
}

// -------------------------------------------------------------------

// MsgQueryMsg

// required string Msg = 1;
inline bool MsgQueryMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgQueryMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgQueryMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgQueryMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MsgQueryMsg::msg() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgQueryMsg.Msg)
  return *msg_;
}
inline void MsgQueryMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.MsgQueryMsg.Msg)
}
inline void MsgQueryMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.MsgQueryMsg.Msg)
}
inline void MsgQueryMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.MsgQueryMsg.Msg)
}
inline ::std::string* MsgQueryMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.MsgQueryMsg.Msg)
  return msg_;
}
inline ::std::string* MsgQueryMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgQueryMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgQueryMsg.Msg)
}

// -------------------------------------------------------------------

// MsgQueryMsgResult

// required string resultData = 1;
inline bool MsgQueryMsgResult::has_resultdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgQueryMsgResult::set_has_resultdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgQueryMsgResult::clear_has_resultdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgQueryMsgResult::clear_resultdata() {
  if (resultdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_->clear();
  }
  clear_has_resultdata();
}
inline const ::std::string& MsgQueryMsgResult::resultdata() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgQueryMsgResult.resultData)
  return *resultdata_;
}
inline void MsgQueryMsgResult::set_resultdata(const ::std::string& value) {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_ = new ::std::string;
  }
  resultdata_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.MsgQueryMsgResult.resultData)
}
inline void MsgQueryMsgResult::set_resultdata(const char* value) {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_ = new ::std::string;
  }
  resultdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.MsgQueryMsgResult.resultData)
}
inline void MsgQueryMsgResult::set_resultdata(const char* value, size_t size) {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_ = new ::std::string;
  }
  resultdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.MsgQueryMsgResult.resultData)
}
inline ::std::string* MsgQueryMsgResult::mutable_resultdata() {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resultdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.MsgQueryMsgResult.resultData)
  return resultdata_;
}
inline ::std::string* MsgQueryMsgResult::release_resultdata() {
  clear_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resultdata_;
    resultdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgQueryMsgResult::set_allocated_resultdata(::std::string* resultdata) {
  if (resultdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resultdata_;
  }
  if (resultdata) {
    set_has_resultdata();
    resultdata_ = resultdata;
  } else {
    clear_has_resultdata();
    resultdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgQueryMsgResult.resultData)
}

// required string resultError = 2;
inline bool MsgQueryMsgResult::has_resulterror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgQueryMsgResult::set_has_resulterror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgQueryMsgResult::clear_has_resulterror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgQueryMsgResult::clear_resulterror() {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_->clear();
  }
  clear_has_resulterror();
}
inline const ::std::string& MsgQueryMsgResult::resulterror() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgQueryMsgResult.resultError)
  return *resulterror_;
}
inline void MsgQueryMsgResult::set_resulterror(const ::std::string& value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.MsgQueryMsgResult.resultError)
}
inline void MsgQueryMsgResult::set_resulterror(const char* value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.MsgQueryMsgResult.resultError)
}
inline void MsgQueryMsgResult::set_resulterror(const char* value, size_t size) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.MsgQueryMsgResult.resultError)
}
inline ::std::string* MsgQueryMsgResult::mutable_resulterror() {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.MsgQueryMsgResult.resultError)
  return resulterror_;
}
inline ::std::string* MsgQueryMsgResult::release_resulterror() {
  clear_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resulterror_;
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgQueryMsgResult::set_allocated_resulterror(::std::string* resulterror) {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (resulterror) {
    set_has_resulterror();
    resulterror_ = resulterror;
  } else {
    clear_has_resulterror();
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgQueryMsgResult.resultError)
}

// -------------------------------------------------------------------

// MsgAddMsg

// required string TableName = 1;
inline bool MsgAddMsg::has_tablename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgAddMsg::set_has_tablename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgAddMsg::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgAddMsg::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& MsgAddMsg::tablename() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgAddMsg.TableName)
  return *tablename_;
}
inline void MsgAddMsg::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.MsgAddMsg.TableName)
}
inline void MsgAddMsg::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.MsgAddMsg.TableName)
}
inline void MsgAddMsg::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.MsgAddMsg.TableName)
}
inline ::std::string* MsgAddMsg::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.MsgAddMsg.TableName)
  return tablename_;
}
inline ::std::string* MsgAddMsg::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgAddMsg::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgAddMsg.TableName)
}

// required string Msg = 2;
inline bool MsgAddMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgAddMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgAddMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgAddMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MsgAddMsg::msg() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgAddMsg.Msg)
  return *msg_;
}
inline void MsgAddMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.MsgAddMsg.Msg)
}
inline void MsgAddMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.MsgAddMsg.Msg)
}
inline void MsgAddMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.MsgAddMsg.Msg)
}
inline ::std::string* MsgAddMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.MsgAddMsg.Msg)
  return msg_;
}
inline ::std::string* MsgAddMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgAddMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgAddMsg.Msg)
}

// -------------------------------------------------------------------

// MsgAddMsgResult

// required string resultError = 1;
inline bool MsgAddMsgResult::has_resulterror() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgAddMsgResult::set_has_resulterror() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgAddMsgResult::clear_has_resulterror() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgAddMsgResult::clear_resulterror() {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_->clear();
  }
  clear_has_resulterror();
}
inline const ::std::string& MsgAddMsgResult::resulterror() const {
  // @@protoc_insertion_point(field_get:netmsg.MsgAddMsgResult.resultError)
  return *resulterror_;
}
inline void MsgAddMsgResult::set_resulterror(const ::std::string& value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set:netmsg.MsgAddMsgResult.resultError)
}
inline void MsgAddMsgResult::set_resulterror(const char* value) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(value);
  // @@protoc_insertion_point(field_set_char:netmsg.MsgAddMsgResult.resultError)
}
inline void MsgAddMsgResult::set_resulterror(const char* value, size_t size) {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  resulterror_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netmsg.MsgAddMsgResult.resultError)
}
inline ::std::string* MsgAddMsgResult::mutable_resulterror() {
  set_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulterror_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:netmsg.MsgAddMsgResult.resultError)
  return resulterror_;
}
inline ::std::string* MsgAddMsgResult::release_resulterror() {
  clear_has_resulterror();
  if (resulterror_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resulterror_;
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgAddMsgResult::set_allocated_resulterror(::std::string* resulterror) {
  if (resulterror_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulterror_;
  }
  if (resulterror) {
    set_has_resulterror();
    resulterror_ = resulterror;
  } else {
    clear_has_resulterror();
    resulterror_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:netmsg.MsgAddMsgResult.resultError)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace netmsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::netmsg::NetMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::netmsg::NetMsgType>() {
  return ::netmsg::NetMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_netmsg_2eproto__INCLUDED
